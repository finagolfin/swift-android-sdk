diff --git a/Sources/NIOCore/BSDSocketAPI.swift b/Sources/NIOCore/BSDSocketAPI.swift
index c370644e..07ba7beb 100644
--- a/Sources/NIOCore/BSDSocketAPI.swift
+++ b/Sources/NIOCore/BSDSocketAPI.swift
@@ -68,8 +68,13 @@ import Musl
 #endif
 import CNIOLinux
 
+#if os(Android)
+private let sysInet_ntop: @convention(c) (CInt, UnsafeRawPointer, UnsafeMutablePointer<CChar>, socklen_t) -> UnsafePointer<CChar>? = inet_ntop
+private let sysInet_pton: @convention(c) (CInt, UnsafePointer<CChar>, UnsafeMutableRawPointer) -> CInt = inet_pton
+#else
 private let sysInet_ntop: @convention(c) (CInt, UnsafeRawPointer?, UnsafeMutablePointer<CChar>?, socklen_t) -> UnsafePointer<CChar>? = inet_ntop
 private let sysInet_pton: @convention(c) (CInt, UnsafePointer<CChar>?, UnsafeMutableRawPointer?) -> CInt = inet_pton
+#endif
 #elseif canImport(Darwin)
 import Darwin
 
diff --git a/Sources/NIOCore/SystemCallHelpers.swift b/Sources/NIOCore/SystemCallHelpers.swift
index dc9b457a..b74092a1 100644
--- a/Sources/NIOCore/SystemCallHelpers.swift
+++ b/Sources/NIOCore/SystemCallHelpers.swift
@@ -43,11 +43,16 @@ private let sysOpenWithMode: @convention(c) (UnsafePointer<CChar>, CInt, NIOPOSI
 private let sysLseek: @convention(c) (CInt, off_t, CInt) -> off_t = lseek
 private let sysRead: @convention(c) (CInt, UnsafeMutableRawPointer?, size_t) -> size_t = read
 #endif
-private let sysIfNameToIndex: @convention(c) (UnsafePointer<CChar>?) -> CUnsignedInt = if_nametoindex
 
+#if os(Android)
+private let sysIfNameToIndex: @convention(c) (UnsafePointer<CChar>) -> CUnsignedInt = if_nametoindex
+private let sysGetifaddrs: @convention(c) (UnsafeMutablePointer<UnsafeMutablePointer<ifaddrs>?>) -> CInt = getifaddrs
+#else
+private let sysIfNameToIndex: @convention(c) (UnsafePointer<CChar>?) -> CUnsignedInt = if_nametoindex
 #if !os(Windows)
 private let sysGetifaddrs: @convention(c) (UnsafeMutablePointer<UnsafeMutablePointer<ifaddrs>?>?) -> CInt = getifaddrs
 #endif
+#endif
 
 private func isUnacceptableErrno(_ code: Int32) -> Bool {
     switch code {
diff --git a/Sources/NIOFileSystem/Internal/Concurrency Primitives/ThreadPosix.swift b/Sources/NIOFileSystem/Internal/Concurrency Primitives/ThreadPosix.swift
index 56a7c3e7..48b3356e 100644
--- a/Sources/NIOFileSystem/Internal/Concurrency Primitives/ThreadPosix.swift	
+++ b/Sources/NIOFileSystem/Internal/Concurrency Primitives/ThreadPosix.swift
@@ -17,8 +17,13 @@ import CNIOLinux
 
 private let sys_pthread_getname_np = CNIOLinux_pthread_getname_np
 private let sys_pthread_setname_np = CNIOLinux_pthread_setname_np
+#if os(Android)
+private typealias ThreadDestructor = @convention(c) (UnsafeMutableRawPointer) ->
+    UnsafeMutableRawPointer
+#else
 private typealias ThreadDestructor = @convention(c) (UnsafeMutableRawPointer?) ->
     UnsafeMutableRawPointer?
+#endif
 #elseif canImport(Darwin)
 import Darwin
 
@@ -118,7 +123,11 @@ enum ThreadOpsPosix: ThreadOps {
 
                 body(Thread(handle: hThread, desiredName: name))
 
+                #if os(Android)
+                return UnsafeMutableRawPointer(bitPattern: 0xdeadbee)!
+                #else
                 return nil
+                #endif
             },
             args: argv0
         )
diff --git a/Sources/NIOFileSystem/Internal/System Calls/Syscall.swift b/Sources/NIOFileSystem/Internal/System Calls/Syscall.swift
index 423dd56b..721a747c 100644
--- a/Sources/NIOFileSystem/Internal/System Calls/Syscall.swift	
+++ b/Sources/NIOFileSystem/Internal/System Calls/Syscall.swift
@@ -346,7 +346,11 @@ public enum Libc {
         return valueOrErrno {
             pathBytes.withUnsafeMutableBufferPointer { pointer in
                 // The array must be terminated with a nil.
+                #if os(Android)
+                libc_fts_open([pointer.baseAddress!, unsafeBitCast(0, to: UnsafeMutablePointer<CInterop.PlatformChar>.self)], options.rawValue)
+                #else
                 libc_fts_open([pointer.baseAddress, nil], options.rawValue)
+                #endif
             }
         }
     }
diff --git a/Sources/NIOFileSystem/Internal/System Calls/Syscalls.swift b/Sources/NIOFileSystem/Internal/System Calls/Syscalls.swift
index be043e9d..a0cadd15 100644
--- a/Sources/NIOFileSystem/Internal/System Calls/Syscalls.swift	
+++ b/Sources/NIOFileSystem/Internal/System Calls/Syscalls.swift
@@ -395,12 +395,21 @@ internal func libc_confstr(
 #endif
 
 /// fts(3)
+#if os(Android)
+internal func libc_fts_open(
+    _ path: [UnsafeMutablePointer<CInterop.PlatformChar>],
+    _ options: CInt
+) -> UnsafeMutablePointer<CInterop.FTS> {
+    return fts_open(path, options, nil)!
+}
+#else
 internal func libc_fts_open(
     _ path: [UnsafeMutablePointer<CInterop.PlatformChar>?],
     _ options: CInt
 ) -> UnsafeMutablePointer<CInterop.FTS> {
     return fts_open(path, options, nil)
 }
+#endif
 
 /// fts(3)
 internal func libc_fts_read(
diff --git a/Sources/NIOPosix/System.swift b/Sources/NIOPosix/System.swift
index 025e60f0..fc6c0584 100644
--- a/Sources/NIOPosix/System.swift
+++ b/Sources/NIOPosix/System.swift
@@ -106,7 +106,11 @@ private let sysGetpeername: @convention(c) (CInt, UnsafeMutablePointer<sockaddr>
 private let sysGetsockname: @convention(c) (CInt, UnsafeMutablePointer<sockaddr>?, UnsafeMutablePointer<socklen_t>?) -> CInt = getsockname
 #endif
 
+#if os(Android)
+private let sysIfNameToIndex: @convention(c) (UnsafePointer<CChar>) -> CUnsignedInt = if_nametoindex
+#else
 private let sysIfNameToIndex: @convention(c) (UnsafePointer<CChar>?) -> CUnsignedInt = if_nametoindex
+#endif
 #if !os(Windows)
 private let sysSocketpair: @convention(c) (CInt, CInt, CInt, UnsafeMutablePointer<CInt>?) -> CInt = socketpair
 #endif
diff --git a/Sources/NIOPosix/ThreadPosix.swift b/Sources/NIOPosix/ThreadPosix.swift
index b6e0ed4a..852f08f6 100644
--- a/Sources/NIOPosix/ThreadPosix.swift
+++ b/Sources/NIOPosix/ThreadPosix.swift
@@ -19,7 +19,11 @@ import CNIOLinux
 
 private let sys_pthread_getname_np = CNIOLinux_pthread_getname_np
 private let sys_pthread_setname_np = CNIOLinux_pthread_setname_np
+#if os(Android)
+private typealias ThreadDestructor = @convention(c) (UnsafeMutableRawPointer) -> UnsafeMutableRawPointer
+#else
 private typealias ThreadDestructor = @convention(c) (UnsafeMutableRawPointer?) -> UnsafeMutableRawPointer?
+#endif
 #elseif canImport(Darwin)
 private let sys_pthread_getname_np = pthread_getname_np
 // Emulate the same method signature as pthread_setname_np on Linux.
@@ -111,7 +115,11 @@ enum ThreadOpsPosix: ThreadOps {
 
             body(NIOThread(handle: hThread, desiredName: name))
 
+            #if os(Android)
+            return UnsafeMutableRawPointer(bitPattern: 0xdeadbee)!
+            #else
             return nil
+            #endif
         }, args: argv0)
         precondition(res == 0, "Unable to create thread: \(res)")
 
