name: SDKs (macOS)
on:
  #pull_request:
  #schedule:
    #- cron: '0 21 * * *'
  push:
    branches: '*'
jobs:
  build-toolchain:
    # The macos-14 GH Runner is ARM, which cannot run the Android emulator
    runs-on: macos-13
    timeout-minutes: 1000
    strategy:
      matrix:
        #arch: [aarch64, x86_64, armv7]
        arch: [x86_64]
        version: [release, devel, trunk]
      fail-fast: false
    steps:
      - name: Install Tools
        run: brew install tree

      - name: Install Swift Host Toolchain
        run: |
          mkdir swift-toolchain
          pushd swift-toolchain
          case ${{ matrix.version }} in
            "release")
              wget -q https://download.swift.org/swift-5.10.1-release/xcode/swift-5.10.1-RELEASE/swift-5.10.1-RELEASE-osx.pkg
              ;;
            "devel")
              wget -q https://download.swift.org/swift-6.0-branch/xcode/swift-6.0-DEVELOPMENT-SNAPSHOT-2024-07-19-a/swift-6.0-DEVELOPMENT-SNAPSHOT-2024-07-19-a-osx.pkg
              ;;
            "trunk")
              wget -q https://download.swift.org/development/xcode/swift-DEVELOPMENT-SNAPSHOT-2024-07-15-a/swift-DEVELOPMENT-SNAPSHOT-2024-07-15-a-osx.pkg
              ;;
            *)
              echo "Unsupported version: ${{ matrix.version }}"
              exit 1
              ;;
          esac
          xar -x -C . -f swift-*-osx.pkg
          tar xz -C . -f swift-*-osx-package.pkg/Payload
          echo "TOOLCHAIN=${PWD}/usr" >> $GITHUB_ENV

      - name: Check Swift Host Toolchain
        run: |
          echo "TOOLCHAIN: ${TOOLCHAIN}"
          ${TOOLCHAIN}/bin/swift --version

      - name: "Install Android NDK"
        id: setup-ndk
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r27
          add-to-path: false

      - name: Set Android NDK
        run: |
          echo "NDK_PATH=${{ steps.setup-ndk.outputs.ndk-path }}" >> $GITHUB_ENV

      - name: Fetch Swift Android SDK
        run: |
          mkdir swift-android-sdk
          pushd swift-android-sdk
          #SDK_DIR="swift-5.10-android-24-sdk"
          #wget -q https://github.com/finagolfin/swift-android-sdk/releases/download/5.10/${SDK_DIR}.tar.xz
          #tar xf ${SDK_DIR}.tar.xz
          #ls ${SDK_DIR}
          #echo "SDK=${PWD}/${SDK_DIR}" >> $GITHUB_ENV

          case ${{ matrix.version }} in
            "release")
              wget -q https://github.com/marcprux/swift-android-sdk/releases/download/sdk-snapshot-2024-08-02/sdk-release-26d-x86_64.zip
              ;;
            "devel")
              wget -q https://github.com/marcprux/swift-android-sdk/releases/download/sdk-snapshot-2024-08-02/sdk-devel-x86_64.zip
              ;;
            "trunk")
              wget -q https://github.com/marcprux/swift-android-sdk/releases/download/sdk-snapshot-2024-08-02/sdk-trunk-x86_64.zip
              ;;
            *)
              echo "Unsupported version: ${{ matrix.version }}"
              exit 1
              ;;
          esac

          unzip *.zip
          tar xf *.tar.xz
          cd *-sdk
          file usr/bin/swift-build-tool
          echo "SDK=${PWD}" >> $GITHUB_ENV

      - name: Setup Swift Android SDK
        run: |
          ls -la ${SDK}/usr/lib/swift/clang
          rm -vf ${SDK}/usr/lib/swift/clang
          # Swift 5.10: usr/lib/clang/15.0.0 Trunk and Devel: usr/lib/clang/17
          ${TOOLCHAIN}/bin/clang --version
          ln -sfv ${TOOLCHAIN}/lib/clang/* ${SDK}/usr/lib/swift/clang
          ls -d ${SDK}/usr/lib/swift/clang/include

      # download an archived toolchain package just to grab libicudata.so
      # and other sundry libraries
      - name: Fetch Additional Android Libraries
        run: |
          mkdir android-libs
          pushd android-libs
          XTRA_DIR="swift-5.10-android-24-sdk"
          wget -q https://github.com/finagolfin/swift-android-sdk/releases/download/5.10/${XTRA_DIR}.tar.xz
          tar xf ${XTRA_DIR}.tar.xz
          ls ${XTRA_DIR}

      - name: Build Android Sample 
        run: |
          ARCH=${{ matrix.arch }}
          case $ARCH in
            "aarch64"|"x86_64")
              ARCHID="${ARCH}-linux-android"
              ;;
            "armv7")
              ARCHID="arm-linux-androideabi"
              ;;
            *)
              echo "Unsupported architecture: ${ARCH}"
              exit 1
              ;;
          esac

          echo "NDK_PATH: ${NDK_PATH}"
          NDK=${NDK_PATH}/toolchains/llvm/prebuilt/darwin-x86_64
          echo "NDK: ${NDK}"

          cat > android-${ARCH}.json << EOF
          {
              "version": 1,
              "target": "${ARCH}-unknown-linux-android24",
              "toolchain-bin-dir": "${TOOLCHAIN}/bin",
              "sdk": "${NDK}/sysroot",
              "extra-cc-flags": [ "-fPIC" ],
              "extra-cpp-flags": [ "-lstdc++" ],
              "extra-swiftc-flags": [
                  "-resource-dir", "${SDK}/usr/lib/swift",
                  "-tools-directory", "${NDK}/bin",
                  "-L", "${SDK}/usr/lib/${ARCHID}"
              ]
          }
          EOF

          cat android-${ARCH}.json

          # create a simple "Hello World" sample
          rm -rf swift-demo
          mkdir swift-demo
          pushd swift-demo

          ${TOOLCHAIN}/bin/swift package init --type=executable

          cat >> Sources/main.swift << EOF
          #if swift(>=6.1)
          print("Swift version: 6.1+")
          #elseif swift(>=6.0)
          print("Swift version: 6.0+")
          #elseif swift(>=5.10)
          print("Swift version: 5.10+")
          #elseif swift(>=5.0)
          print("Swift version: 5.0+")
          #endif

          import Foundation
          print("Current Date: \(Date())")

          EOF

          popd

          ${TOOLCHAIN}/bin/swift build -c release --verbose --package-path swift-demo --destination android-${ARCH}.json -Xlinker -rpath -Xlinker \$ORIGIN/$SDK_NAME/usr/lib/$ARCHID

          # prepare files to push
          mkdir android-swift-test
          pushd android-swift-test

          cp ../swift-demo/.build/${{ matrix.arch }}-unknown-linux-android24/release/swift-demo .
          cp ${NDK}/sysroot/usr/lib/${ARCHID}/libc++_shared.so .
          #cp ${SDK}/usr/lib/${ARCHID}/*.so .
          cp ${SDK}/usr/lib/swift/android/*.so .

          # copy extra libs
          cp ../android-libs/*/usr/lib/${ARCHID}/libandroid-spawn.so .
          cp ../android-libs/*/usr/lib/${ARCHID}/libswiftGlibc.so .
          cp ../android-libs/*/usr/lib/${ARCHID}/libicudata.so .
          cp ../android-libs/*/usr/lib/${ARCHID}/libicui18n.so .
          cp ../android-libs/*/usr/lib/${ARCHID}/libicuuc.so .
          cp ../android-libs/*/usr/lib/${ARCHID}/libcurses.so .
          cp ../android-libs/*/usr/lib/${ARCHID}/libncursesw.so .
          cp ../android-libs/*/usr/lib/${ARCHID}/libsqlite3.so .
          cp ../android-libs/*/usr/lib/${ARCHID}/libcurl.so .
          cp ../android-libs/*/usr/lib/${ARCHID}/libxml2.so .

          du -skhc *
          popd

      - name: Test Swift Android Executable (x86_64)
        # Can only run x86_64; attempting arm64-v8a on Intel yields:
        # PANIC: Avd's CPU Architecture 'arm64' is not supported by the QEMU2 emulator on x86_64 host
        # And trying to run emulator on ARM macOS (e.g., macos-14) yields:
        # HVF error: HV_UNSUPPORTED
        if: ${{ matrix.arch == 'x86_64' }}
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 24
          arch: x86_64
          script: |
            adb shell mkdir -p /data/local/tmp/android-swift-test
            adb push android-swift-test/* /data/local/tmp/android-swift-test
            adb shell LD_LIBRARY_PATH=/data/local/tmp/android-swift-test /data/local/tmp/android-swift-test/swift-demo

