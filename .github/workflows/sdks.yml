name: SDKs
on:
  pull_request:
  schedule:
    - cron: '0 9 * * *'
jobs:
  get-latest-toolchain:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: [5.4, 5.5]
    outputs:
      release-version: ${{ steps.check.outputs.release-tag }}
      devel-version: ${{ steps.check.outputs.devel-tag }}
    steps:
      - name: Check for latest Swift ${{ matrix.version }} toolchain
        id: check
        run: |
          if [ ${{ matrix.version }} = '5.4' ]; then
            LATEST_TOOLCHAIN_VERSION=$(curl -sL https://swift.org/download | grep -m1 swift-5.4 | cut -d- -f2)
            SWIFT_TAG="swift-${LATEST_TOOLCHAIN_VERSION}-RELEASE"
            echo "::set-output name=release-tag::$SWIFT_TAG"
          else
            LATEST_TOOLCHAIN_VERSION=$(curl -sL https://github.com/apple/swift/releases | grep -m1 swift-5.5-DEV | cut -d- -f5-7)
            SWIFT_TAG="swift-5.5-DEVELOPMENT-SNAPSHOT-${LATEST_TOOLCHAIN_VERSION}-a"
            echo "::set-output name=devel-tag::$SWIFT_TAG"
          fi
          echo "::set-output name=latest-tag::$SWIFT_TAG"
      - name: Get cached toolchain
        id: cache-toolchain
        uses: actions/cache@v2
        with:
          path: ~/${{ steps.check.outputs.latest-tag }}-ubuntu20.04.tar.gz
          key: ${{ steps.check.outputs.latest-tag }}-toolchain
      - name: Get latest toolchain if not cached
        if: ${{ steps.cache-toolchain.outputs.cache-hit != 'true' }}
        run: |
          if [ ${{ matrix.version }} = '5.4' ]; then
            SWIFT_BRANCH="$(echo ${{ steps.check.outputs.release-tag }} | cut -d- -f2)-release"
            SWIFT_TAG="${{ steps.check.outputs.release-tag }}"
          else
            SWIFT_BRANCH="5.5-branch"
            SWIFT_TAG="${{ steps.check.outputs.devel-tag }}"
          fi
          cd
          wget -q https://swift.org/builds/swift-$SWIFT_BRANCH/ubuntu2004/$SWIFT_TAG/$SWIFT_TAG-ubuntu20.04.tar.gz
          echo "got latest toolchain: ${SWIFT_TAG}"
  build-sdk-and-tests:
    runs-on: ubuntu-latest
    needs: get-latest-toolchain
    strategy:
      fail-fast: false
      matrix:
        version: [5.4, 5.5]
        arch: [aarch64, x86_64, armv7]
    env:
      ANDROID_API_LEVEL: 24
    steps:
      - name: Get cached release toolchain
        if: ${{ matrix.version == '5.4' }}
        id: cache-release-toolchain
        uses: actions/cache@v2
        with:
          path: ~/${{ needs.get-latest-toolchain.outputs.release-version }}-ubuntu20.04.tar.gz
          key: ${{ needs.get-latest-toolchain.outputs.release-version }}-toolchain
      - name: Get cached devel toolchain
        if: ${{ matrix.version == '5.5' }}
        id: cache-devel-toolchain
        uses: actions/cache@v2
        with:
          path: ~/${{ needs.get-latest-toolchain.outputs.devel-version }}-ubuntu20.04.tar.gz
          key: ${{ needs.get-latest-toolchain.outputs.devel-version }}-toolchain
      - name: Extract the latest version string
        id: version
        run: |
          if [ ${{ matrix.version }} = '5.4' ]; then
            echo "::set-output name=latest::$(echo ${{ needs.get-latest-toolchain.outputs.release-version }} | cut -d- -f2)"
          else
            echo "::set-output name=latest::$(echo ${{ needs.get-latest-toolchain.outputs.devel-version }} | cut -d- -f5-7)"
          fi
      - name: Get cached SDK if its the latest
        id: cache-sdk
        uses: actions/cache@v2
        with:
          path: ~/swift-${{ matrix.version }}*-android-${{ matrix.arch }}-*-sdk.tar.xz
          key: ${{ steps.version.outputs.latest }}-${{ matrix.arch }}-sdk
      - name: Clone
        uses: actions/checkout@v2
        with:
          path: sdk-config
      - name: Build Swift ${{ matrix.version }} Android SDK if not the latest
        if: ${{ steps.cache-sdk.outputs.cache-hit != 'true' }}
        run: |
          if [ ${{ matrix.version }} = '5.4' ]; then
            export SWIFT_TAG="${{ needs.get-latest-toolchain.outputs.release-version }}"
          else
            export SWIFT_TAG="${{ needs.get-latest-toolchain.outputs.devel-version }}"
          fi

          cd sdk-config
          sudo apt install ninja-build
          ANDROID_ARCH=${{ matrix.arch }} swift get-packages-and-swift-source.swift

          SDK_NAME=$(ls | grep swift-${{ matrix.version }}.*-android-${{ matrix.arch }})
          SDK=`pwd`/$SDK_NAME

          tar xf ~/$SWIFT_TAG-ubuntu20.04.tar.gz

          ./swift/utils/build-script -RA --skip-build-cmark --build-llvm=0 --android --android-ndk $ANDROID_NDK_HOME --android-arch ${{ matrix.arch }} --android-api-level $ANDROID_API_LEVEL --android-icu-uc $SDK/usr/lib/libicuuc.so --android-icu-uc-include $SDK/usr/include --android-icu-i18n $SDK/usr/lib/libicui18n.so --android-icu-i18n-include $SDK/usr/include --android-icu-data $SDK/usr/lib/libicudata.so --build-swift-tools=0 --native-swift-tools-path=`pwd`/$SWIFT_TAG-ubuntu20.04/usr/bin --native-clang-tools-path=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin --cross-compile-hosts=android-${{ matrix.arch }} --cross-compile-deps-path=$SDK --skip-local-build --xctest --install-swift --install-libdispatch --install-foundation --install-xctest --install-destdir=$SDK --swift-install-components='clang-resource-dir-symlink;license;stdlib;sdk-overlay'

          patchelf --set-rpath \$ORIGIN/../..:\$ORIGIN $SDK/usr/lib/swift/android/lib*.so

          tar cJf ~/$SDK_NAME.tar.xz $SDK_NAME
          rm -rf $SDK_NAME
      - name: Patch SDK and SPM config
        run: |
          cd sdk-config

          tar xf ~/swift-${{ matrix.version }}*-ubuntu20.04.tar.gz
          TOOLCHAIN_NAME=$(ls | grep swift-${{ matrix.version }}.*-ubuntu20.04)
          sed -i "s%/home/butta/swift-5.4.2-RELEASE-ubuntu20.04%`pwd`/${TOOLCHAIN_NAME}%" android-${{ matrix.arch }}.json

          tar xf ~/swift-${{ matrix.version }}*-android-${{ matrix.arch }}*-${ANDROID_API_LEVEL}-sdk.tar.xz
          SDK_NAME=$(ls | grep swift-${{ matrix.version }}.*-sdk)
          sed -i "s%/home/butta/swift-5.4-android-${{ matrix.arch }}-${ANDROID_API_LEVEL}-sdk%`pwd`/${SDK_NAME}%" android-${{ matrix.arch }}.json

          sed -i "s%/home/butta/src/android-ndk-r21e%${ANDROID_NDK_HOME}%" android-${{ matrix.arch }}.json
      - name: Get Swift package
        uses: actions/checkout@v2
        with:
          repository: apple/swift-argument-parser
          path: swift-argument-parser
      - name: Build Swift package
        run: |
          cd swift-argument-parser
          swift build --build-tests --enable-test-discovery --destination ../sdk-config/android-${{ matrix.arch }}.json -Xlinker -rpath -Xlinker \$ORIGIN/lib/swift/android
      - name: Get Swift crypto package
        uses: actions/checkout@v2
        with:
          repository: apple/swift-crypto
          path: swift-crypto
      - name: Build Swift crypto package
        run: |
          cd swift-crypto
          git apply ../sdk-config/package-patches/swift-crypto-test-vectors.patch
          swift build --build-tests --enable-test-discovery --destination ../sdk-config/android-${{ matrix.arch }}.json -Xlinker -rpath -Xlinker \$ORIGIN/lib/swift/android
      - name: Get Swift NIO package
        uses: actions/checkout@v2
        with:
          repository: apple/swift-nio
          path: swift-nio
      - name: Build Swift NIO package
        if: ${{ matrix.version == '5.4' }}
        run: |
          cd swift-nio
          git apply ../sdk-config/package-patches/swift-nio-change-tmp-and-disable-tests.patch
          swift build --build-tests --destination ../sdk-config/android-${{ matrix.arch }}.json -Xlinker -rpath -Xlinker \$ORIGIN/lib/swift/android
      - name: Get Swift Numerics package
        uses: actions/checkout@v2
        with:
          repository: apple/swift-numerics
          path: sn
      - name: Build Swift Numerics package
        run: |
          cd sn
          swift build --build-tests --enable-test-discovery --destination ../sdk-config/android-${{ matrix.arch }}.json -Xlinker -rpath -Xlinker \$ORIGIN/lib/swift/android -Xlinker -lm
      - name: Get Swift System package
        uses: actions/checkout@v2
        with:
          repository: apple/swift-system
          path: ss
      - name: Build Swift System package
        run: |
          cd ss
          git apply ../sdk-config/package-patches/swift-system-test.patch
          swift build --build-tests --destination ../sdk-config/android-${{ matrix.arch }}.json -Xlinker -rpath -Xlinker \$ORIGIN/lib/swift/android
      - name: Get Swift Collections package
        uses: actions/checkout@v2
        with:
          repository: apple/swift-collections
          path: sco
      - name: Build Swift Collections package
        run: |
          cd sco
          swift build -j 1 --build-tests --destination ../sdk-config/android-${{ matrix.arch }}.json -Xlinker -rpath -Xlinker \$ORIGIN/lib/swift/android
      - name: Get Swift NIO SSH package
        uses: actions/checkout@v2
        with:
          repository: apple/swift-nio-ssh
          path: sns
      - name: Build Swift NIO SSH package
        run: |
          cd sns
          git apply ../sdk-config/package-patches/swift-nio-ssh-package-deps.patch
          swift build --build-tests --enable-test-discovery --destination ../sdk-config/android-${{ matrix.arch }}.json -Xlinker -rpath -Xlinker \$ORIGIN/lib/swift/android
      - name: Get Swift NIO SSL package
        uses: actions/checkout@v2
        with:
          repository: apple/swift-nio-ssl
          path: snl
      - name: Build Swift NIO SSL package
        run: |
          cd snl
          git apply ../sdk-config/package-patches/swift-nio-ssl-package-deps.patch
          swift build --build-tests --destination ../sdk-config/android-${{ matrix.arch }}.json -Xlinker -rpath -Xlinker \$ORIGIN/lib/swift/android
      - name: Get Yams package
        uses: actions/checkout@v2
        with:
          repository: jpsim/Yams
          path: yams
      - name: Build Yams package
        run: |
          cd yams
          git apply ../sdk-config/package-patches/yams-fixture-path.patch
          swift build --build-tests --destination ../sdk-config/android-${{ matrix.arch }}.json -Xlinker -rpath -Xlinker \$ORIGIN/lib/swift/android
      - name: Get Swift tools support core package
        uses: actions/checkout@v2
        with:
          repository: apple/swift-tools-support-core
          path: swift-tools-support-core
      - name: Build Swift tools support core package
        run: |
          cd swift-tools-support-core
          #swift build --build-tests --enable-test-discovery -Xswiftc -Xcc -Xswiftc -U_GNU_SOURCE --destination ../sdk-config/android-${{ matrix.arch }}.json -Xlinker -rpath -Xlinker \$ORIGIN/lib/swift/android
      - name: Get cached Termux debug app for NIO tests
        if: ${{ matrix.arch == 'x86_64' }}
        id: cache-termux
        uses: actions/cache@v2
        with:
          path: ~/termux-debug.apk
          key: termux-app
      - name: Put tests in one directory to push to Android x86_64 emulator
        if: ${{ matrix.arch == 'x86_64' }}
        run: |
          mkdir -p pack/lib/swift/android
          cp swift-argument-parser/.build/x86_64-unknown-linux-android/debug/{math,repeat,roll,swift-argument-parserPackageTests.xctest} pack
          cp swift-crypto/.build/x86_64-unknown-linux-android/debug/swift-cryptoPackageTests.xctest pack
          if [ ${{ matrix.version }} = '5.4' ]; then
            cp swift-nio/.build/x86_64-unknown-linux-android/debug/swift-nioPackageTests.xctest pack
          fi
          cp sn/.build/x86_64-unknown-linux-android/debug/swift-numericsPackageTests.xctest pack
          cp ss/.build/x86_64-unknown-linux-android/debug/swift-systemPackageTests.xctest pack
          cp sco/.build/x86_64-unknown-linux-android/debug/swift-collectionsPackageTests.xctest pack
          cp sns/.build/x86_64-unknown-linux-android/debug/swift-nio-sshPackageTests.xctest pack
          cp snl/.build/x86_64-unknown-linux-android/debug/swift-nio-sslPackageTests.xctest pack
          cp yams/.build/x86_64-unknown-linux-android/debug/YamsPackageTests.xctest pack
          #cp swift-tools-support-core/.build/x86_64-unknown-linux-android/debug/swift-tools-support-corePackageTests.xctest pack
          mkdir pack/crypto-vectors
          cp swift-crypto/Tests/Test\ Vectors/* swift-crypto/Tests/_CryptoExtrasVectors/* pack/crypto-vectors
          cp yams/Tests/YamsTests/Fixtures/SourceKitten#289/debug.yaml pack
          cp sdk-config/swift-${{ matrix.version }}*-android-x86_64-*${ANDROID_API_LEVEL}-sdk/usr/lib/lib*so pack/lib
          cp sdk-config/swift-${{ matrix.version }}*-android-x86_64-*${ANDROID_API_LEVEL}-sdk/usr/lib/swift/android/lib*so pack/lib/swift/android
          cp $ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/lib/x86_64-linux-android/libc++_shared.so pack/lib/swift/android
      - name: Run tests on Android x86_64 emulator
        if: ${{ matrix.arch == 'x86_64' }}
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 24
          arch: x86_64
          script: |
            adb install ~/termux-debug.apk
            adb push pack /data/local/tmp

            adb shell /data/local/tmp/pack/swift-argument-parserPackageTests.xctest
            adb shell /data/local/tmp/pack/swift-cryptoPackageTests.xctest
            if [ ${{ matrix.version }} = '5.4' ]; then adb shell "run-as com.termux cp -r /data/local/tmp/pack /data/data/com.termux/"; fi
            if [ ${{ matrix.version }} = '5.4' ]; then adb shell "run-as com.termux /data/data/com.termux/pack/swift-nioPackageTests.xctest"; fi
            adb shell /data/local/tmp/pack/swift-numericsPackageTests.xctest
            adb shell /data/local/tmp/pack/swift-systemPackageTests.xctest
            adb shell /data/local/tmp/pack/swift-collectionsPackageTests.xctest
            adb shell /data/local/tmp/pack/swift-nio-sshPackageTests.xctest
            adb shell /data/local/tmp/pack/swift-nio-sslPackageTests.xctest
            adb shell /data/local/tmp/pack/YamsPackageTests.xctest
            #adb shell /data/local/tmp/pack/swift-tools-support-corePackageTests.xctest
