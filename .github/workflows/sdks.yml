name: SDKs
on:
  pull_request:
  schedule:
    - cron: '0 9 * * *'
  push:   
    branches: '*'

jobs:
  get-latest-toolchain:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: [release, devel, trunk]
    outputs:
      release-version: ${{ steps.check.outputs.release-tag }}
      devel-version: ${{ steps.check.outputs.devel-tag }}
      trunk-version: ${{ steps.check.outputs.trunk-tag }}
    steps:
      - name: Check for latest Swift ${{ matrix.version }} toolchain
        id: check
        run: |
          if [ ${{ matrix.version }} = 'release' ]; then
            LATEST_TOOLCHAIN_VERSION=$(curl -sL https://github.com/apple/swift/releases | grep -m1 swift-5.10 | cut -d- -f2)
            SWIFT_TAG="swift-${LATEST_TOOLCHAIN_VERSION}-RELEASE"
            echo "release-tag=$SWIFT_TAG" >> $GITHUB_OUTPUT
          elif [ ${{ matrix.version }} = 'devel' ]; then
            LATEST_TOOLCHAIN_VERSION=$(curl -sL https://github.com/apple/swift/tags | grep -m1 swift-6.0-DEV | cut -d- -f8-10)
            SWIFT_TAG="swift-6.0-DEVELOPMENT-SNAPSHOT-2024-07-19-a"
            # ${LATEST_TOOLCHAIN_VERSION}-a"
            echo "devel-tag=$SWIFT_TAG" >> $GITHUB_OUTPUT
          else
            LATEST_TOOLCHAIN_VERSION=$(curl -sL https://github.com/apple/swift/tags | grep -m1 swift-DEV | cut -d- -f7-9)
            SWIFT_TAG="swift-DEVELOPMENT-SNAPSHOT-2024-07-15-a"
            # ${LATEST_TOOLCHAIN_VERSION}-a"
            echo "trunk-tag=$SWIFT_TAG" >> $GITHUB_OUTPUT
          fi
          echo "latest-tag=$SWIFT_TAG" >> $GITHUB_OUTPUT
      - name: Get cached Ubuntu toolchain
        id: cache-toolchain-ubuntu
        uses: actions/cache@v4
        with:
          path: ~/${{ steps.check.outputs.latest-tag }}-ubuntu22.04.tar.gz
          key: swift-ubuntu22.04-${{ steps.check.outputs.latest-tag }}-toolchain
      - name: Download Ubuntu toolchain
        if: ${{ steps.cache-toolchain-ubuntu.outputs.cache-hit != 'true' }}
        run: |
          SWIFT_TAG="${{ steps.check.outputs.latest-tag }}"
          if [ ${{ matrix.version }} = 'release' ]; then
            SWIFT_BRANCH="swift-$(echo ${{ steps.check.outputs.release-tag }} | cut -d- -f2)-release"
          elif [ ${{ matrix.version }} = 'devel' ]; then
            SWIFT_BRANCH="swift-6.0-branch"
          else
            SWIFT_BRANCH="development"
          fi
          cd
          wget -q https://download.swift.org/$SWIFT_BRANCH/ubuntu2204/$SWIFT_TAG/$SWIFT_TAG-ubuntu22.04.tar.gz
          echo "got latest toolchain: ${SWIFT_TAG}"
      - name: Get cached macOS toolchain
        id: cache-toolchain-macos
        uses: actions/cache@v4
        with:
          path: ~/${{ steps.check.outputs.latest-tag }}-osx.pkg
          key: swift-macos-${{ steps.check.outputs.latest-tag }}-toolchain
      - name: Download macOS toolchain
        if: ${{ steps.cache-toolchain-macos.outputs.cache-hit != 'true' }}
        run: |
          SWIFT_TAG="${{ steps.check.outputs.latest-tag }}"
          if [[ ${{ matrix.version }} = 'release'* ]]; then
            # downcase "swift-5.10.1-RELEASE" to "swift-5.10.1-release"
            SWIFT_BRANCH=$(echo "$SWIFT_TAG" | tr '[:upper:]' '[:lower:]')
          elif [ ${{ matrix.version }} = 'devel' ]; then
            SWIFT_BRANCH="swift-6.0-branch"
          else
            SWIFT_BRANCH="development"
          fi
          cd
          wget -q https://download.swift.org/$SWIFT_BRANCH/xcode/$SWIFT_TAG/$SWIFT_TAG-osx.pkg
          echo "got latest toolchain: ${SWIFT_TAG}"
  build-sdk-and-tests:
    runs-on: ${{ matrix.os }}
    needs: get-latest-toolchain
    strategy:
      fail-fast: false
      matrix:
        ###arch: [x86_64, armv7, aarch64]
        arch: [x86_64]
        ###version: [release-25c, release-27, devel, trunk]
        version: [release-25c]
        os: [ubuntu-22.04, macos-13]
    env:
      ANDROID_API_LEVEL: 24
    steps:
      - name: Extract the latest version string
        id: version
        run: |
          if [[ ${{ matrix.version }} = 'release'* ]]; then
            TAG="${{ needs.get-latest-toolchain.outputs.release-version }}"
            echo "latest=$(echo $TAG | cut -d- -f2)" >> $GITHUB_OUTPUT
          elif [ ${{ matrix.version }} = 'devel' ]; then
            TAG="${{ needs.get-latest-toolchain.outputs.devel-version }}"
            echo "latest=$(echo $TAG | cut -d- -f5-7)" >> $GITHUB_OUTPUT
          else
            TAG="${{ needs.get-latest-toolchain.outputs.trunk-version }}"
            echo "latest=$(echo $TAG | cut -d- -f4-6)" >> $GITHUB_OUTPUT
          fi
          echo "tag=$TAG" >> $GITHUB_OUTPUT
      - name: Setup OS Environment
        id: setup-os
        run: |
          if [[ ${{ matrix.os }} = 'macos'* ]]; then
            # the inplace "-i" flag to sed requires an empty arg on macOS
            echo "SEDINPLACE=''" >> $GITHUB_ENV
          fi
      - name: Get cached SDK
        id: cache-sdk
        uses: actions/cache@v4
        with:
          path: ~/swift-${{ matrix.version }}-android-${{ matrix.arch }}-*-sdk.tar.xz
          key: ${{ matrix.version }}-${{ steps.version.outputs.latest }}-${{ matrix.arch }}-ndk-sdk
      - name: Clone
        uses: actions/checkout@v4
        with:
          path: sdk-config
      - name: Get cached Swift Ubuntu ${{ matrix.version }} toolchain
        if: ${{ matrix.os == 'ubuntu-22.04' }}
        id: cache-toolchain-ubuntu
        uses: actions/cache@v4
        with:
          path: ~/${{ steps.version.outputs.tag }}-ubuntu22.04.tar.gz
          key: swift-ubuntu22.04-${{ steps.version.outputs.tag }}-toolchain
      - name: Get cached Swift macOS ${{ matrix.version }} toolchain
        if: ${{ matrix.os == 'macos-'* }}
        id: cache-toolchain-macos
        uses: actions/cache@v4
        with:
          path: ~/${{ steps.version.outputs.tag }}-osx.pkg
          key: swift-macos-${{ steps.version.outputs.tag }}-toolchain
      - name: Setup Swift Toolchain
        env:
          SWIFT_TAG: ${{ steps.version.outputs.tag }}
          ANDROID_ARCH: ${{ matrix.arch }}
        run: |
          set -x
          cd sdk-config
          if [[ ${{ matrix.os }} = 'macos'* ]]; then
            brew install ninja patchelf

            mkdir ${SWIFT_TAG}
            pushd ${SWIFT_TAG}
            ls ~/
            xar -x -C . -f ~/${SWIFT_TAG}-osx.pkg
            tar xz -C . -f ${SWIFT_TAG}-osx-package.pkg/Payload
            TOOLCHAIN=${PWD}/usr
            popd
          elif [[ ${{ matrix.os }} = 'ubuntu'* ]]; then
            sudo apt install ninja-build

            tar xf ~/$SWIFT_TAG-ubuntu22.04.tar.gz
            TOOLCHAIN=${PWD}/$SWIFT_TAG-ubuntu22.04/usr
          fi

          echo "TOOLCHAIN=${TOOLCHAIN}" >> $GITHUB_ENV
          ${TOOLCHAIN}/bin/swift --version

      - name: Build Swift ${{ matrix.version }} Android SDK if not the latest
        if: ${{ steps.cache-sdk.outputs.cache-hit != 'true' }}
        env:
          SWIFT_TAG: ${{ steps.version.outputs.tag }}
          ANDROID_ARCH: ${{ matrix.arch }}
        run: |
          set -x
          cd sdk-config

          ${TOOLCHAIN}/bin/swift --version
          BUILD_SWIFT_PM=1 ${TOOLCHAIN}/bin/swift get-packages-and-swift-source.swift

          SDK_NAME=$(ls | grep swift-$(echo ${{ matrix.version }} | sed "s/-2[5-9][a-e]*//")-android-${{ matrix.arch }})
          SDK=`pwd`/$SDK_NAME

          git apply swift-android-ci.patch
          git apply -C1 swift-android.patch swift-android-both-ndks.patch
          if [[ ${{ matrix.version }} = 'release'* ]]; then
            sed -i ${SEDINPLACE} "s%strsignal(signal).map%String(cString: strsignal(signal)) //%" swift-driver/Sources/SwiftDriver/Driver/ToolExecutionDelegate.swift
            git apply swift-android-stdlib-except-trunk.patch
            STUPID_FILE_RENAMING=Tool
          else
            sed -i ${SEDINPLACE} "s%r26%ndk/27%" swift/stdlib/cmake/modules/AddSwiftStdlib.cmake
            STUPID_FILE_RENAMING=Command
          fi
          if [ ${{ matrix.version }} = 'release-25c' ]; then
            NDK=$ANDROID_NDK/../25.2.9519653
            sed -i ${SEDINPLACE} "s%#include <unistd%#include <signal.h>\n#include <unistd%" swift-corelibs-libdispatch/dispatch/dispatch.h
            sed -i ${SEDINPLACE} "s%#include <unistd%#include <signal.h>\n#include <unistd%" llbuild/products/libllbuild/include/llbuild/buildsystem.h
            sed -i ${SEDINPLACE} "s%#include <time%#include <signal.h>\n#include <time%" swift-tools-support-core/Sources/TSCclibc/include/indexstore_functions.h
            sed -i ${SEDINPLACE} "s%#include <time%#include <signal.h>\n#include <time%" swift-crypto/Sources/CCryptoBoringSSL/include/CCryptoBoringSSL_asn1.h
          else
            NDK=$ANDROID_NDK
            git apply -C0 swift-android-foundation-ndk26.patch
            if [ ${{ matrix.version }} = 'release-27' ]; then
              git apply swift-android-stdlib-ndk26.patch
            else
              if [ ${{ matrix.version }} = 'devel' ]; then
                git apply android-overlay/import-android-devel.patch
              else
                git apply swift-android-foundation-trunk.patch
              fi
              git apply android-overlay/foundation-fixes.patch android-overlay/swift-argument-parser.patch android-overlay/swift-stdlib-modulemap.patch android-overlay/swift-system.patch android-overlay/yams.patch
            fi
          fi
          sed -i ${SEDINPLACE} "s%/data/data/com.termux/files%$SDK%" $SDK/usr/lib/pkgconfig/sqlite3.pc
          sed -i ${SEDINPLACE} "s%String(cString: getpass%\"fake\" //%" swiftpm/Sources/PackageRegistry$STUPID_FILE_RENAMING/PackageRegistry$STUPID_FILE_RENAMING+Auth.swift

          # currently failing when run on macOS during "Performing build step for 'libdispatch-android-x86_64'": Error copying file "/Users/runner/work/swift-android-sdk/swift-android-sdk/sdk-config/build/Ninja-Release/swift-android-x86_64/libdispatch-android-x86_64-prefix//libdispatch.so" to "/Users/runner/work/swift-android-sdk/swift-android-sdk/sdk-config/build/Ninja-Release/swift-android-x86_64/./lib/swift/android/x86_64/libdispatch.so".

          ./swift/utils/build-script -RA --skip-build-cmark --build-llvm=0 --android --android-ndk $NDK --android-arch ${{ matrix.arch }} --android-api-level $ANDROID_API_LEVEL --build-swift-tools=0 --native-swift-tools-path=${TOOLCHAIN}/bin --native-clang-tools-path=${TOOLCHAIN}/bin --cross-compile-hosts=android-${{ matrix.arch }} --cross-compile-deps-path=$SDK --skip-local-build --build-swift-static-stdlib --xctest --skip-early-swift-driver --install-swift --install-libdispatch --install-foundation --install-xctest --install-destdir=$SDK --swift-install-components='clang-resource-dir-symlink;license;stdlib;sdk-overlay' --cross-compile-append-host-target-to-destdir=False -b -p --install-llbuild --sourcekit-lsp --skip-early-swiftsyntax

          cp $NDK/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/lib/$(echo ${{ matrix.arch }} | sed "s/v7//")-linux-android*/libc++_shared.so $SDK/usr/lib
          patchelf --set-rpath \$ORIGIN $SDK/usr/lib/swift/android/libdispatch.so
          patchelf --set-rpath \$ORIGIN/../..:\$ORIGIN $SDK/usr/lib/swift/android/lib[FXs]*.so

          tar cJf ~/${SDK_NAME/-release/-${{ matrix.version }}}.tar.xz $SDK_NAME
          rm -rf build/ $SDK_NAME llvm-project/
      - name: Upload SDK
        uses: actions/upload-artifact@v4
        with:
          name: swift-android-sdk-${{ matrix.version }}-ndk-${{ matrix.arch }}-host-${{ matrix.os }}
          path: ~/swift-${{ matrix.version }}-android-${{ matrix.arch }}*-sdk.tar.xz
      - name: Unpack ${{ matrix.version }} SDK
        id: sdk-unpack
        run: |
          set -x
          cd sdk-config
          tar xf ~/swift-${{ matrix.version }}-android-${{ matrix.arch }}*-sdk.tar.xz

          ARCH_JSON=${PWD}/$(ls swift-*-sdk/usr/swiftpm-android-${{ matrix.arch }}.json)
          cat ${ARCH_JSON}

          if [[ ${{ matrix.os }} = 'macos'* ]]; then
            # the toolchain destination is wrong for macOS, so manually build it
            ARCH_JSON=${PWD}/$(ls swift-*-sdk/usr/swiftpm-android-${{ matrix.arch }}.json)
            cat ${ARCH_JSON}
          fi

          echo "ARCH_JSON=${ARCH_JSON}" >> $GITHUB_ENV
      - name: Get Swift Argument Parser package
        uses: actions/checkout@v4
        with:
          repository: apple/swift-argument-parser
          path: swift-argument-parser
      - name: Build Swift Argument Parser package
        # macOS error: ld.lld: error: --defsym:1: symbol not found: changelog_authors_main
        if: ${{ matrix.os != 'macos-13' }}
        run: |
          cd swift-argument-parser
          ${TOOLCHAIN}/bin/swift build --build-tests --destination ${ARCH_JSON} -Xlinker -rpath -Xlinker \$ORIGIN/lib/swift/android
      - name: Get Swift crypto package
        uses: actions/checkout@v4
        with:
          repository: apple/swift-crypto
          path: swift-crypto
      - name: Build Swift crypto package
        run: |
          cd swift-crypto
          if [ ${{ matrix.version }} = 'release-25c' ]; then
            sed -i ${SEDINPLACE} "s%#include <time%#include <signal.h>\n#include <time%" Sources/CCryptoBoringSSL/include/CCryptoBoringSSL_asn1.h
          fi
          sed -i ${SEDINPLACE} "s%\\\\(testsDirectory)/.*Vectors%/data/local/tmp/pack/crypto-vectors%" Tests/CryptoTests/Utils/RFCVector.swift Tests/CryptoTests/Utils/Wycheproof.swift Tests/_CryptoExtrasTests/Utils/Wycheproof.swift
          sed -i ${SEDINPLACE} 's%#file%"/data/local/tmp/pack/crypto-vectors"%;s%../_CryptoExtrasVectors/%%' Tests/_CryptoExtrasTests/TestRSABlindSigning.swift
          ${TOOLCHAIN}/bin/swift build --build-tests --destination ${ARCH_JSON} -Xlinker -rpath -Xlinker \$ORIGIN/lib/swift/android
      - name: Get Swift NIO package
        uses: actions/checkout@v4
        with:
          repository: apple/swift-nio
          path: swift-nio
      - name: Build Swift NIO package
        run: |
          cd swift-nio
          git apply ../sdk-config/swift-nio-disable-ecn-tests.patch ../sdk-config/swift-nio-filesystem-both-ndks.patch
          if [ ${{ matrix.version }} = 'release-25c' ]; then
            git apply -R ../sdk-config/swift-nio-ndk26.patch
          else
            git apply ../sdk-config/swift-nio-ndk27.patch
          fi
          ${TOOLCHAIN}/bin/swift package update
          cd .build/checkouts/
          patch -p1 < ../../../sdk-config/android-overlay/swift-system.patch
          cd ../..
          ${TOOLCHAIN}/bin/swift build --build-tests --destination ${ARCH_JSON} -Xlinker -rpath -Xlinker \$ORIGIN/lib/swift/android
      - name: Get Swift Numerics package
        uses: actions/checkout@v4
        with:
          repository: apple/swift-numerics
          path: swift-numerics
      - name: Build Swift Numerics package
        run: |
          cd swift-numerics
          ${TOOLCHAIN}/bin/swift build --build-tests --destination ${ARCH_JSON} -Xlinker -rpath -Xlinker \$ORIGIN/lib/swift/android
      - name: Get Swift System package
        uses: actions/checkout@v4
        with:
          repository: apple/swift-system
          path: swift-system
      - name: Build Swift System package
        run: |
          cd swift-system
          ${TOOLCHAIN}/bin/swift build --build-tests --destination ${ARCH_JSON} -Xlinker -rpath -Xlinker \$ORIGIN/lib/swift/android
      - name: Get Swift Collections package
        uses: actions/checkout@v4
        with:
          repository: apple/swift-collections
          path: swift-collections
      - name: Build Swift Collections package
        run: |
          cd swift-collections
          ${TOOLCHAIN}/bin/swift build -j 1 --build-tests --destination ${ARCH_JSON} -Xlinker -rpath -Xlinker \$ORIGIN/lib/swift/android
      - name: Get Swift Atomics package
        uses: actions/checkout@v4
        with:
          repository: apple/swift-atomics
          path: swift-atomics
          ref: 1.1.0
      - name: Get Swift NIO SSH package
        uses: actions/checkout@v4
        with:
          repository: apple/swift-nio-ssh
          path: sns
      - name: Build Swift NIO SSH package
        # macOS error: swift-nio/Sources/NIOPosix/System.swift:128:97: error: cannot convert value of type '(Int32, UnsafeMutablePointer<msghdr>, Int32) -> Int' to specified type '@convention(c) (CInt, UnsafeMutablePointer<msghdr>?, CInt) -> ssize_t' (aka '@convention(c) (Int32, Optional<UnsafeMutablePointer<msghdr>>, Int32) -> Int')
        if: ${{ matrix.os != 'macos-13' }}
        run: |
          cd sns
          sed -i ${SEDINPLACE} "s%url: .*swift-\(\w\+\)\.git.*$%path: \"../swift-\1\"),%g" Package.swift
          ${TOOLCHAIN}/bin/swift build --build-tests --destination ${ARCH_JSON} -Xlinker -rpath -Xlinker \$ORIGIN/lib/swift/android
      - name: Get Swift NIO SSL package
        uses: actions/checkout@v4
        with:
          repository: apple/swift-nio-ssl
          path: snl
      - name: Build Swift NIO SSL package
        # macOS error: swift-nio/Sources/NIOPosix/System.swift:128:97: error: cannot convert value of type '(Int32, UnsafeMutablePointer<msghdr>, Int32) -> Int' to specified type '@convention(c) (CInt, UnsafeMutablePointer<msghdr>?, CInt) -> ssize_t' (aka '@convention(c) (Int32, Optional<UnsafeMutablePointer<msghdr>>, Int32) -> Int')
        if: ${{ matrix.os != 'macos-13' }}
        run: |
          cd snl
          if [ ${{ matrix.version }} = 'release-25c' ]; then
            sed -i ${SEDINPLACE} "s%#include <time%#include <signal.h>\n#include <time%" Sources/CNIOBoringSSL/include/CNIOBoringSSL_asn1.h
          fi
          SWIFTCI_USE_LOCAL_DEPS=1 ${TOOLCHAIN}/bin/swift build --build-tests --destination ${ARCH_JSON} -Xlinker -rpath -Xlinker \$ORIGIN/lib/swift/android
      - name: Get Yams package
        uses: actions/checkout@v4
        with:
          repository: jpsim/Yams
          path: yams
      - name: Build Yams package
        run: |
          cd yams
          sed -i ${SEDINPLACE} "s% fixturesDirectory + \"/SourceKitten#289% \"/data/local/tmp/pack%" Tests/YamsTests/PerformanceTests.swift
          ${TOOLCHAIN}/bin/swift build --build-tests --destination ${ARCH_JSON} -Xlinker -rpath -Xlinker \$ORIGIN/lib/swift/android
      - name: Get Swift NIO HTTP/2 package
        uses: actions/checkout@v4
        with:
          repository: apple/swift-nio-http2
          path: snh
      - name: Build Swift NIO HTTP/2 package
        # macOS error: swift-nio/Sources/NIOPosix/System.swift:128:97: error: cannot convert value of type '(Int32, UnsafeMutablePointer<msghdr>, Int32) -> Int' to specified type '@convention(c) (CInt, UnsafeMutablePointer<msghdr>?, CInt) -> ssize_t' (aka '@convention(c) (Int32, Optional<UnsafeMutablePointer<msghdr>>, Int32) -> Int')
        if: ${{ matrix.os != 'macos-13' && matrix.arch != 'armv7' }}
        run: |
          cd snh
          sed -i ${SEDINPLACE} "s%url: .*swift-\(\w\+\)\.git.*$%path: \"../swift-\1\"),%g" Package.swift
          ${TOOLCHAIN}/bin/swift build --build-tests --destination ${ARCH_JSON} -Xlinker -rpath -Xlinker \$ORIGIN/lib/swift/android
      - name: Get Swift Algorithms package
        uses: actions/checkout@v4
        with:
          repository: apple/swift-algorithms
          path: sa
      - name: Build Swift Algorithms package
        run: |
          cd sa
          sed -i ${SEDINPLACE} "s%url: .*$%path: \"../swift-numerics\"),%" Package.swift
          ${TOOLCHAIN}/bin/swift build --build-tests --destination ${ARCH_JSON} -Xlinker -rpath -Xlinker \$ORIGIN/lib/swift/android
      - name: Get cached Termux debug app for NIO tests
        if: ${{ matrix.arch == 'x86_64' }}
        id: cache-termux
        uses: actions/cache@v4
        with:
          path: ~/termux-debug.apk
          key: termux-app
      - name: Get Termux debug app if not cached
        if: ${{ matrix.arch == 'x86_64' && steps.cache-termux.outputs.cache-hit != 'true'}}
        run: wget -O ~/termux-debug.apk https://github.com/termux/termux-app/releases/download/v0.118.0/termux-app_v0.118.0+github-debug_x86_64.apk
      - name: Put x86_64 tests in one directory to push to Android x86_64 emulator and set KVM permissions
        if: ${{ matrix.arch == 'x86_64' }}
        run: |
          mkdir -p pack/lib/swift/android
          TARGET="x86_64-unknown-linux-android$ANDROID_API_LEVEL"
          cp swift-argument-parser/.build/$TARGET/debug/{generate-manual,math,repeat,roll,swift-argument-parserPackageTests.xctest} pack

          wget -q https://raw.githubusercontent.com/termux/termux-elf-cleaner/v1.10/termux-elf-cleaner.cpp
          wget -q https://raw.githubusercontent.com/termux/termux-elf-cleaner/v1.10/elf.h
          clang -D__ANDROID_API__=$ANDROID_API_LEVEL -o elf-cleaner termux-elf-cleaner.cpp
          ./elf-cleaner pack/{generate-manual,math,repeat,roll} || true

          cp swift-crypto/.build/$TARGET/debug/swift-cryptoPackageTests.xctest pack
          cp swift-nio/.build/$TARGET/debug/swift-nioPackageTests.xctest pack
          cp swift-numerics/.build/$TARGET/debug/swift-numericsPackageTests.xctest pack
          cp swift-system/.build/$TARGET/debug/swift-systemPackageTests.xctest pack
          cp swift-collections/.build/$TARGET/debug/swift-collectionsPackageTests.xctest pack
          cp sns/.build/$TARGET/debug/swift-nio-sshPackageTests.xctest pack
          cp snl/.build/$TARGET/debug/swift-nio-sslPackageTests.xctest pack
          cp yams/.build/$TARGET/debug/YamsPackageTests.xctest pack
          cp snh/.build/$TARGET/debug/swift-nio-http2PackageTests.xctest pack
          cp sa/.build/$TARGET/debug/swift-algorithmsPackageTests.xctest pack

          mkdir pack/crypto-vectors pack/swift-crypto_CryptoTests.resources
          cp swift-crypto/Tests/Test\ Vectors/* swift-crypto/Tests/_CryptoExtrasVectors/* pack/crypto-vectors
          cp swift-crypto/Tests/CryptoTests/HPKE/hpke-test-vectors.json pack/swift-crypto_CryptoTests.resources
          rm swift-nio/Tests/NIOFileSystemIntegrationTests/Test\ Data/*symlink
          cp -r swift-nio/Tests/NIOFileSystemIntegrationTests/Test\ Data/ swift-nio/Tests/NIOFileSystemIntegrationTests/FileHandleTests.swift pack
          cp yams/Tests/YamsTests/Fixtures/SourceKitten#289/debug.yaml pack
          cp sdk-config/swift-*-android-x86_64-*${ANDROID_API_LEVEL}-sdk/usr/lib/lib*so pack/lib
          cp sdk-config/swift-*-android-x86_64-*${ANDROID_API_LEVEL}-sdk/usr/lib/swift/android/lib*so pack/lib/swift/android
          mv pack/lib/libc++_shared.so pack/lib/swift/android
          rm -rf sdk-config/${{ steps.version.outputs.tag }}-ubuntu22.04

          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm
      - name: Run tests on Android x86_64 emulator
        if: ${{ matrix.arch == 'x86_64' }}
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 24
          arch: x86_64
          script: |
            adb install ~/termux-debug.apk
            adb push pack /data/local/tmp

            adb shell /data/local/tmp/pack/swift-argument-parserPackageTests.xctest
            adb shell /data/local/tmp/pack/swift-cryptoPackageTests.xctest
            adb shell "run-as com.termux mkdir /data/data/com.termux/pack"
            adb shell "run-as com.termux cp /data/local/tmp/pack/{swift-nioPackageTests.xctest,FileHandleTests.swift} /data/data/com.termux/pack"
            adb shell "run-as com.termux cp -r /data/local/tmp/pack/lib /data/data/com.termux/pack"
            adb shell "run-as com.termux cp -r /data/local/tmp/pack/Test\ Data /data/data/com.termux/pack"
            adb shell "run-as com.termux ln -s README.md /data/data/com.termux/pack/Test\ Data/README.md.symlink"
            adb shell "run-as com.termux ln -s Foo /data/data/com.termux/pack/Test\ Data/Foo.symlink"
            adb shell "run-as com.termux sh -c 'TMPDIR=/data/data/com.termux /data/data/com.termux/pack/swift-nioPackageTests.xctest'"
            adb shell /data/local/tmp/pack/swift-numericsPackageTests.xctest
            adb shell "TMPDIR=/data/local/tmp /data/local/tmp/pack/swift-systemPackageTests.xctest"
            adb shell /data/local/tmp/pack/swift-collectionsPackageTests.xctest
            adb shell /data/local/tmp/pack/swift-nio-sshPackageTests.xctest
            adb shell /data/local/tmp/pack/swift-nio-sslPackageTests.xctest
            adb shell /data/local/tmp/pack/swift-nio-http2PackageTests.xctest
            adb shell /data/local/tmp/pack/swift-algorithmsPackageTests.xctest
            adb shell /data/local/tmp/pack/YamsPackageTests.xctest

