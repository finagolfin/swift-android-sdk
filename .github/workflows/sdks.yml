name: SDKs
on:
  pull_request:
  schedule:
    - cron: '0 9 * * *'
jobs:
  get-latest-toolchain:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: [release, devel, trunk]
    outputs:
      release-version: ${{ steps.check.outputs.release-tag }}
      devel-version: ${{ steps.check.outputs.devel-tag }}
      trunk-version: ${{ steps.check.outputs.trunk-tag }}
    steps:
      - name: Check for latest Swift ${{ matrix.version }} toolchain
        id: check
        run: |
          if [ ${{ matrix.version }} = 'release' ]; then
            LATEST_TOOLCHAIN_VERSION=$(curl -sL https://github.com/apple/swift/releases | grep -m1 swift-5.5 | cut -d- -f2)
            SWIFT_TAG="swift-${LATEST_TOOLCHAIN_VERSION}-RELEASE"
            echo "::set-output name=release-tag::$SWIFT_TAG"
          elif [ ${{ matrix.version }} = 'devel' ]; then
            LATEST_TOOLCHAIN_VERSION=$(curl -sL https://github.com/apple/swift/tags | grep -m1 swift-5.5-DEV | cut -d- -f5-7)
            SWIFT_TAG="swift-5.5-DEVELOPMENT-SNAPSHOT-${LATEST_TOOLCHAIN_VERSION}-a"
            echo "::set-output name=devel-tag::$SWIFT_TAG"
          else
            LATEST_TOOLCHAIN_VERSION=$(curl -sL https://github.com/apple/swift/tags | grep -m1 swift-DEV | cut -d- -f4-6)
            SWIFT_TAG="swift-DEVELOPMENT-SNAPSHOT-${LATEST_TOOLCHAIN_VERSION}-a"
            echo "::set-output name=trunk-tag::$SWIFT_TAG"
          fi
          echo "::set-output name=latest-tag::$SWIFT_TAG"
      - name: Get cached toolchain
        id: cache-toolchain
        uses: actions/cache@v2
        with:
          path: ~/${{ steps.check.outputs.latest-tag }}-ubuntu20.04.tar.gz
          key: ${{ steps.check.outputs.latest-tag }}-toolchain
      - name: Get latest toolchain if not cached
        if: ${{ steps.cache-toolchain.outputs.cache-hit != 'true' }}
        run: |
          if [ ${{ matrix.version }} = 'release' ]; then
            SWIFT_BRANCH="swift-$(echo ${{ steps.check.outputs.release-tag }} | cut -d- -f2)-release"
          elif [ ${{ matrix.version }} = 'devel' ]; then
            SWIFT_BRANCH="swift-5.5-branch"
          else
            SWIFT_BRANCH="development"
          fi
          cd
          SWIFT_TAG="${{ steps.check.outputs.latest-tag }}"
          wget -q https://swift.org/builds/$SWIFT_BRANCH/ubuntu2004/$SWIFT_TAG/$SWIFT_TAG-ubuntu20.04.tar.gz
          echo "got latest toolchain: ${SWIFT_TAG}"
  build-sdk-and-tests:
    runs-on: ubuntu-latest
    needs: get-latest-toolchain
    strategy:
      fail-fast: false
      matrix:
        version: [release, devel, trunk]
        arch: [aarch64, x86_64, armv7]
    env:
      ANDROID_API_LEVEL: 24
    steps:
      - name: Extract the latest version string
        id: version
        run: |
          if [ ${{ matrix.version }} = 'release' ]; then
            TAG="${{ needs.get-latest-toolchain.outputs.release-version }}"
            echo "::set-output name=latest::$(echo $TAG | cut -d- -f2)"
          elif [ ${{ matrix.version }} = 'devel' ]; then
            TAG="${{ needs.get-latest-toolchain.outputs.devel-version }}"
            echo "::set-output name=latest::$(echo $TAG | cut -d- -f5-7)"
          else
            TAG="${{ needs.get-latest-toolchain.outputs.trunk-version }}"
            echo "::set-output name=latest::$(echo $TAG | cut -d- -f4-6)"
          fi
          echo "::set-output name=tag::$TAG"
      - name: Get cached Swift ${{ matrix.version }} toolchain
        id: cache-toolchain
        uses: actions/cache@v2
        with:
          path: ~/${{ steps.version.outputs.tag }}-ubuntu20.04.tar.gz
          key: ${{ steps.version.outputs.tag }}-toolchain
      - name: Get cached SDK
        id: cache-sdk
        uses: actions/cache@v2
        with:
          path: ~/swift-${{ matrix.version }}-android-${{ matrix.arch }}-*-sdk.tar.xz
          key: ${{ matrix.version }}-${{ steps.version.outputs.latest }}-${{ matrix.arch }}-latest-sdk
      - name: Clone
        uses: actions/checkout@v2
        with:
          path: sdk-config
      - name: Build Swift ${{ matrix.version }} Android SDK if not the latest
        if: ${{ steps.cache-sdk.outputs.cache-hit != 'true' }}
        env:
          SWIFT_TAG: ${{ steps.version.outputs.tag }}
          ANDROID_ARCH: ${{ matrix.arch }}
        run: |
          cd sdk-config
          sudo apt install ninja-build
          if [ ${{ matrix.version }} = 'trunk' ]; then
            export BUILD_SWIFT_PM=1
          fi
          swift get-packages-and-swift-source.swift

          SDK_NAME=$(ls | grep swift-${{ matrix.version }}-android-${{ matrix.arch }})
          SDK=`pwd`/$SDK_NAME

          tar xf ~/$SWIFT_TAG-ubuntu20.04.tar.gz

          if [ ${{ matrix.version }} = 'trunk' ]; then
            EXTRA_FLAGS="-b -p --install-llbuild --skip-early-swift-driver"

            wget -q https://patch-diff.githubusercontent.com/raw/apple/swift/pull/36917.diff
            cd swift
            patch -p1 < ../36917.diff
            cd ..
          fi

          ./swift/utils/build-script -RA --skip-build-cmark --build-llvm=0 --android --android-ndk $ANDROID_NDK_LATEST_HOME --android-arch ${{ matrix.arch }} --android-api-level $ANDROID_API_LEVEL --android-icu-uc $SDK/usr/lib/libicuuc.so --android-icu-uc-include $SDK/usr/include --android-icu-i18n $SDK/usr/lib/libicui18n.so --android-icu-i18n-include $SDK/usr/include --android-icu-data $SDK/usr/lib/libicudata.so --build-swift-tools=0 --native-swift-tools-path=`pwd`/$SWIFT_TAG-ubuntu20.04/usr/bin --native-clang-tools-path=`pwd`/$SWIFT_TAG-ubuntu20.04/usr/bin --cross-compile-hosts=android-${{ matrix.arch }} --cross-compile-deps-path=$SDK --skip-local-build --xctest --install-swift --install-libdispatch --install-foundation --install-xctest --install-destdir=$SDK --swift-install-components='clang-resource-dir-symlink;license;stdlib;sdk-overlay' $EXTRA_FLAGS

          patchelf --set-rpath \$ORIGIN $SDK/usr/lib/swift/android/libdispatch.so
          patchelf --set-rpath \$ORIGIN/../..:\$ORIGIN $SDK/usr/lib/swift/android/lib[FXs]*.so

          tar cJf ~/$SDK_NAME.tar.xz $SDK_NAME
          rm -rf $SDK_NAME
      - name: Patch SPM ${{ matrix.version }} config
        run: |
          cd sdk-config

          if [ ! -d ${{ steps.version.outputs.tag }}-ubuntu20.04 ]; then
            tar xf ~/${{ steps.version.outputs.tag }}-ubuntu20.04.tar.gz
          fi
          sed -i "s%/home/butta/swift-5.5.1-RELEASE%`pwd`/${{ steps.version.outputs.tag }}%" android-${{ matrix.arch }}.json

          tar xf ~/swift-${{ matrix.version }}-android-${{ matrix.arch }}*-${ANDROID_API_LEVEL}-sdk.tar.xz
          SDK_NAME=$(ls | grep swift-${{ matrix.version }}.*-sdk)
          sed -i "s%/home/butta/swift-5.5-android-${{ matrix.arch }}-${ANDROID_API_LEVEL}-sdk%`pwd`/${SDK_NAME}%" android-${{ matrix.arch }}.json

          sed -i "s%/home/butta/android-ndk-r23b%${ANDROID_NDK_LATEST_HOME}%" android-${{ matrix.arch }}.json
      - name: Get Swift Argument Parser package
        uses: actions/checkout@v2
        with:
          repository: apple/swift-argument-parser
          path: swift-argument-parser
      - name: Build Swift Argument Parser package
        run: |
          cd swift-argument-parser
          ../sdk-config/${{ steps.version.outputs.tag }}-ubuntu20.04/usr/bin/swift build --build-tests --enable-test-discovery --destination ../sdk-config/android-${{ matrix.arch }}.json -Xlinker -rpath -Xlinker \$ORIGIN/lib/swift/android
      - name: Get Swift crypto package
        uses: actions/checkout@v2
        with:
          repository: apple/swift-crypto
          path: swift-crypto
      - name: Build Swift crypto package
        run: |
          cd swift-crypto
          sed -i "s%\\\\(testsDirectory)/.*Vectors%/data/local/tmp/pack/crypto-vectors%" Tests/CryptoTests/Utils/RFCVector.swift Tests/CryptoTests/Utils/Wycheproof.swift Tests/_CryptoExtrasTests/Utils/Wycheproof.swift
          ../sdk-config/${{ steps.version.outputs.tag }}-ubuntu20.04/usr/bin/swift build --build-tests --enable-test-discovery --destination ../sdk-config/android-${{ matrix.arch }}.json -Xlinker -rpath -Xlinker \$ORIGIN/lib/swift/android
      - name: Get Swift NIO package
        uses: actions/checkout@v2
        with:
          repository: apple/swift-nio
          path: swift-nio
      - name: Build Swift NIO package
        run: |
          cd swift-nio
          git apply ../sdk-config/package-patches/swift-nio-change-tmp-and-disable-tests.patch
          ../sdk-config/${{ steps.version.outputs.tag }}-ubuntu20.04/usr/bin/swift build --build-tests --destination ../sdk-config/android-${{ matrix.arch }}.json -Xlinker -rpath -Xlinker \$ORIGIN/lib/swift/android
      - name: Get Swift Numerics package
        uses: actions/checkout@v2
        with:
          repository: apple/swift-numerics
          path: sn
      - name: Build Swift Numerics package
        run: |
          cd sn
          ../sdk-config/${{ steps.version.outputs.tag }}-ubuntu20.04/usr/bin/swift build --build-tests --enable-test-discovery --destination ../sdk-config/android-${{ matrix.arch }}.json -Xlinker -rpath -Xlinker \$ORIGIN/lib/swift/android -Xlinker -lm
      - name: Get Swift System package
        uses: actions/checkout@v2
        with:
          repository: apple/swift-system
          path: ss
      - name: Build Swift System package
        run: |
          cd ss
          sed -i "s%/tmp%/data/local/tmp%" Tests/SystemTests/FileOperationsTest.swift
          ../sdk-config/${{ steps.version.outputs.tag }}-ubuntu20.04/usr/bin/swift build --build-tests --destination ../sdk-config/android-${{ matrix.arch }}.json -Xlinker -rpath -Xlinker \$ORIGIN/lib/swift/android
      - name: Get Swift Collections package
        uses: actions/checkout@v2
        with:
          repository: apple/swift-collections
          path: sco
      - name: Build Swift Collections package
        run: |
          cd sco
          ../sdk-config/${{ steps.version.outputs.tag }}-ubuntu20.04/usr/bin/swift build -j 1 --build-tests --destination ../sdk-config/android-${{ matrix.arch }}.json -Xlinker -rpath -Xlinker \$ORIGIN/lib/swift/android
      - name: Get Swift NIO SSH package
        uses: actions/checkout@v2
        with:
          repository: apple/swift-nio-ssh
          path: sns
      - name: Build Swift NIO SSH package
        run: |
          cd sns
          sed -i "s%url: .*swift-\(\w\+\)\.git.*$%path: \"../swift-\1\"),%g" Package.swift
          git apply ../sdk-config/package-patches/swift-nio-ssh-package-deps.patch
          ../sdk-config/${{ steps.version.outputs.tag }}-ubuntu20.04/usr/bin/swift build --build-tests --enable-test-discovery --destination ../sdk-config/android-${{ matrix.arch }}.json -Xlinker -rpath -Xlinker \$ORIGIN/lib/swift/android
      - name: Get Swift NIO SSL package
        uses: actions/checkout@v2
        with:
          repository: apple/swift-nio-ssl
          path: snl
      - name: Build Swift NIO SSL package
        run: |
          cd snl
          sed -i "s%url: .*$%path: \"../swift-nio\"),%" Package.swift
          ../sdk-config/${{ steps.version.outputs.tag }}-ubuntu20.04/usr/bin/swift build --build-tests --destination ../sdk-config/android-${{ matrix.arch }}.json -Xlinker -rpath -Xlinker \$ORIGIN/lib/swift/android
      - name: Get Yams package
        uses: actions/checkout@v2
        with:
          repository: jpsim/Yams
          path: yams
      - name: Build Yams package
        run: |
          cd yams
          sed -i "s% fixturesDirectory + \"/SourceKitten#289% \"/data/local/tmp/pack%" Tests/YamsTests/PerformanceTests.swift
          ../sdk-config/${{ steps.version.outputs.tag }}-ubuntu20.04/usr/bin/swift build --build-tests --destination ../sdk-config/android-${{ matrix.arch }}.json -Xlinker -rpath -Xlinker \$ORIGIN/lib/swift/android
      - name: Get Swift NIO HTTP/2 package
        uses: actions/checkout@v2
        with:
          repository: apple/swift-nio-http2
          path: snh
      - name: Build Swift NIO HTTP/2 package
        if: ${{ matrix.arch != 'armv7' }}
        run: |
          cd snh
          sed -i "s%url: .*$%path: \"../swift-nio\")%" Package.swift
          ../sdk-config/${{ steps.version.outputs.tag }}-ubuntu20.04/usr/bin/swift build --build-tests --destination ../sdk-config/android-${{ matrix.arch }}.json -Xlinker -rpath -Xlinker \$ORIGIN/lib/swift/android
      - name: Get Swift Algorithms package
        uses: actions/checkout@v2
        with:
          repository: apple/swift-algorithms
          path: sa
      - name: Build Swift Algorithms package
        run: |
          cd sa
          sed -i "s%url: .*$%path: \"../sn\"),%" Package.swift
          ../sdk-config/${{ steps.version.outputs.tag }}-ubuntu20.04/usr/bin/swift build --build-tests --enable-test-discovery --destination ../sdk-config/android-${{ matrix.arch }}.json -Xlinker -rpath -Xlinker \$ORIGIN/lib/swift/android
      - name: Get cached Termux debug app for NIO tests
        if: ${{ matrix.arch == 'x86_64' }}
        id: cache-termux
        uses: actions/cache@v2
        with:
          path: ~/termux-debug.apk
          key: termux-app
      - name: Put tests in one directory to push to Android x86_64 emulator
        if: ${{ matrix.arch == 'x86_64' }}
        run: |
          mkdir -p pack/lib/swift/android
          cp swift-argument-parser/.build/x86_64-unknown-linux-android/debug/{math,repeat,roll,swift-argument-parserPackageTests.xctest} pack

          wget -q https://raw.githubusercontent.com/termux/termux-elf-cleaner/master/termux-elf-cleaner.cpp
          wget -q https://raw.githubusercontent.com/termux/termux-elf-cleaner/master/elf.h
          clang -D__ANDROID_API__=$ANDROID_API_LEVEL -o termux-elf-cleaner termux-elf-cleaner.cpp

          ./termux-elf-cleaner pack/{math,repeat,roll} || true

          cp swift-crypto/.build/x86_64-unknown-linux-android/debug/swift-cryptoPackageTests.xctest pack
          cp swift-nio/.build/x86_64-unknown-linux-android/debug/swift-nioPackageTests.xctest pack
          cp sn/.build/x86_64-unknown-linux-android/debug/swift-numericsPackageTests.xctest pack
          cp ss/.build/x86_64-unknown-linux-android/debug/swift-systemPackageTests.xctest pack
          cp sco/.build/x86_64-unknown-linux-android/debug/swift-collectionsPackageTests.xctest pack
          cp sns/.build/x86_64-unknown-linux-android/debug/swift-nio-sshPackageTests.xctest pack
          cp snl/.build/x86_64-unknown-linux-android/debug/swift-nio-sslPackageTests.xctest pack
          cp yams/.build/x86_64-unknown-linux-android/debug/YamsPackageTests.xctest pack
          cp snh/.build/x86_64-unknown-linux-android/debug/swift-nio-http2PackageTests.xctest pack
          cp sa/.build/x86_64-unknown-linux-android/debug/swift-algorithmsPackageTests.xctest pack

          mkdir pack/crypto-vectors
          cp swift-crypto/Tests/Test\ Vectors/* swift-crypto/Tests/_CryptoExtrasVectors/* pack/crypto-vectors
          cp yams/Tests/YamsTests/Fixtures/SourceKitten#289/debug.yaml pack
          cp sdk-config/swift-${{ matrix.version }}*-android-x86_64-*${ANDROID_API_LEVEL}-sdk/usr/lib/lib*so pack/lib
          cp sdk-config/swift-${{ matrix.version }}*-android-x86_64-*${ANDROID_API_LEVEL}-sdk/usr/lib/swift/android/lib*so pack/lib/swift/android
          cp $ANDROID_NDK_LATEST_HOME/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/lib/x86_64-linux-android/libc++_shared.so pack/lib/swift/android
          cp ~/termux-debug.apk pack
      - name: Upload test directory
        if: ${{ matrix.arch == 'x86_64' }}
        uses: actions/upload-artifact@v2
        with:
          name: tests-${{ matrix.version }}
          path: pack/
          retention-days: 3
  run-tests-on-android-x86_64-emulator:
    runs-on: macos-latest
    needs: build-sdk-and-tests
    strategy:
      fail-fast: false
      matrix:
        version: [release, devel, trunk]
    steps:
      - name: Download test directory
        uses: actions/download-artifact@v2
        with:
          name: tests-${{ matrix.version }}
          path: pack
      - name: Run tests on Android x86_64 emulator
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 24
          arch: x86_64
          script: |
            adb install pack/termux-debug.apk
            chmod 755 pack/{math,repeat,roll,*.xctest}
            adb push pack /data/local/tmp

            adb shell /data/local/tmp/pack/swift-argument-parserPackageTests.xctest
            adb shell /data/local/tmp/pack/swift-cryptoPackageTests.xctest
            adb shell "run-as com.termux mkdir /data/data/com.termux/pack"
            adb shell "run-as com.termux cp /data/local/tmp/pack/swift-nioPackageTests.xctest /data/data/com.termux/pack"
            adb shell "run-as com.termux cp -r /data/local/tmp/pack/lib /data/data/com.termux/pack"
            adb shell "run-as com.termux /data/data/com.termux/pack/swift-nioPackageTests.xctest"
            adb shell /data/local/tmp/pack/swift-numericsPackageTests.xctest
            adb shell /data/local/tmp/pack/swift-systemPackageTests.xctest
            adb shell /data/local/tmp/pack/swift-collectionsPackageTests.xctest
            adb shell /data/local/tmp/pack/swift-nio-sshPackageTests.xctest
            adb shell /data/local/tmp/pack/swift-nio-sslPackageTests.xctest
            adb shell /data/local/tmp/pack/swift-nio-http2PackageTests.xctest
            adb shell /data/local/tmp/pack/swift-algorithmsPackageTests.xctest
            adb shell /data/local/tmp/pack/YamsPackageTests.xctest
