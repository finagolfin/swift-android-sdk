diff --git a/Sources/NIOFS/Internal/SystemFileHandle.swift b/Sources/NIOFS/Internal/SystemFileHandle.swift
index 3dc51872..49aeeeca 100644
--- a/Sources/NIOFS/Internal/SystemFileHandle.swift
+++ b/Sources/NIOFS/Internal/SystemFileHandle.swift
@@ -1113,7 +1113,7 @@ extension SystemFileHandle {
         let truncate = options.contains(.truncate)
         let delayMaterialization = transactional && isWritable && (exclusiveCreate || truncate)
 
-        if delayMaterialization {
+        if false {
             // When opening in this mode we can more "atomically" create the file, that is, by not
             // leaving the user with a half written file should e.g. the system crash or throw an
             // error while writing. On non-Android Linux we do this by opening the directory for
diff --git a/Tests/NIOFSIntegrationTests/BufferedReaderTests.swift b/Tests/NIOFSIntegrationTests/BufferedReaderTests.swift
index 8404e159..151fccc1 100644
--- a/Tests/NIOFSIntegrationTests/BufferedReaderTests.swift
+++ b/Tests/NIOFSIntegrationTests/BufferedReaderTests.swift
@@ -21,7 +21,7 @@ import XCTest
 final class BufferedReaderTests: XCTestCase {
     func testBufferedReaderSizeAndCapacity() async throws {
         let fs = FileSystem.shared
-        try await fs.withFileHandle(forReadingAt: #filePath) { handle in
+        try await fs.withFileHandle(forReadingAt: "/data/data/com.termux/pack/FileHandleTests.swift") { handle in
             var reader = handle.bufferedReader(capacity: .bytes(128 * 1024))
             XCTAssertEqual(reader.count, 0)
             XCTAssertEqual(reader.capacity, 128 * 1024)
@@ -88,7 +88,7 @@ final class BufferedReaderTests: XCTestCase {
 
     func testBufferedReaderReadingShort() async throws {
         let fs = FileSystem.shared
-        try await fs.withFileHandle(forReadingAt: #filePath) { handle in
+        try await fs.withFileHandle(forReadingAt: "/data/data/com.termux/pack/FileHandleTests.swift") { handle in
             var reader = handle.bufferedReader(capacity: .bytes(128))
             var buffer = ByteBuffer()
             while true {
diff --git a/Tests/NIOFSIntegrationTests/FileHandleTests.swift b/Tests/NIOFSIntegrationTests/FileHandleTests.swift
index c18e2c8e..65872fb9 100644
--- a/Tests/NIOFSIntegrationTests/FileHandleTests.swift
+++ b/Tests/NIOFSIntegrationTests/FileHandleTests.swift
@@ -20,9 +20,8 @@ import XCTest
 
 @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
 final class FileHandleTests: XCTestCase {
-    static let thisFile = FilePath(#filePath)
-    static let testData = FilePath(#filePath)
-        .removingLastComponent()  // FileHandleTests.swift
+    static let thisFile = FilePath("/data/data/com.termux/pack/FileHandleTests.swift")
+    static let testData = FilePath("/data/data/com.termux/pack/")
         .appending("Test Data")
         .lexicallyNormalized()
 
@@ -995,7 +994,7 @@ final class FileHandleTests: XCTestCase {
         }
     }
 
-    func testOpenExclusiveCreateForFileWhichExistsWithoutOTMPFILE() async throws {
+    /*func testOpenExclusiveCreateForFileWhichExistsWithoutOTMPFILE() async throws {
         // Takes the path where 'O_TMPFILE' doesn't exist, so materializing the file is done via
         // creating a temporary file and then renaming it using 'renamex_np'/'renameat2' (Darwin/Linux).
         let temporaryDirectory = try await FileSystem.shared.temporaryDirectory
@@ -1013,7 +1012,7 @@ final class FileHandleTests: XCTestCase {
         try await handle.close()
         let info = try await FileSystem.shared.info(forFileAt: NIOFilePath(path))
         XCTAssertNotNil(info)
-    }
+    }*/
 
     func testOpenExclusiveCreateForFileWhichExistsWithoutOTMPFILEOrRenameat2() async throws {
         // Takes the path where 'O_TMPFILE' doesn't exist, so materializing the file is done via
diff --git a/Tests/NIOFSIntegrationTests/FileSystemTests.swift b/Tests/NIOFSIntegrationTests/FileSystemTests.swift
index f24736a7..310d9691 100644
--- a/Tests/NIOFSIntegrationTests/FileSystemTests.swift
+++ b/Tests/NIOFSIntegrationTests/FileSystemTests.swift
@@ -19,9 +19,8 @@ import NIOCore
 import XCTest
 
 extension NIOFilePath {
-    static let testData = NIOFilePath(
-        FilePath(#filePath)
-            .removingLastComponent()  // FileHandleTests.swift
+    static let testFile = NIOFilePath("/data/data/com.termux/pack/FileHandleTests.swift")
+    static let testData = NIOFilePath(FilePath("/data/data/com.termux/pack/")
             .appending("Test Data")
             .lexicallyNormalized()
     )
@@ -100,7 +100,7 @@ final class FileSystemTests: XCTestCase {
     }
 
     func testOpenFileWhereIntermediateIsNotADirectory() async throws {
-        let path = NIOFilePath(FilePath(#filePath).appending("foobar"))
+        let path = NIOFilePath(FilePath(NIOFilePath.testFile).appending("foobar"))
 
         // For reading:
         await XCTAssertThrowsFileSystemErrorAsync {
@@ -183,7 +183,7 @@ final class FileSystemTests: XCTestCase {
         XCTAssertEqual(contents, ByteBuffer(bytes: [0, 1, 2]))
     }
 
-    func testOpenNonExistentFileForWritingWithMaterialization() async throws {
+    /*func testOpenNonExistentFileForWritingWithMaterialization() async throws {
         for isAbsolute in [true, false] {
             let path = try await self.fs.temporaryFilePath(inTemporaryDirectory: isAbsolute)
             XCTAssertEqual(path.underlying.isAbsolute, isAbsolute)
@@ -256,7 +256,7 @@ final class FileSystemTests: XCTestCase {
         XCTAssertEqual(buffer.readBytes(length: 1024), Array(repeating: 0, count: 1024))
         XCTAssertEqual(buffer.readBytes(length: 1024), Array(repeating: 1, count: 1024))
         XCTAssertEqual(buffer.readableBytes, 0)
-    }
+    }*/
 
     func testOpenFileForReadingAndWriting() async throws {
         let path = try await self.fs.temporaryFilePath()
@@ -315,7 +315,7 @@ final class FileSystemTests: XCTestCase {
         }
     }
 
-    func testOpenNonExistentFileForWritingRelativeToDirectoryWithMaterialization() async throws {
+    /*func testOpenNonExistentFileForWritingRelativeToDirectoryWithMaterialization() async throws {
         // (false, false) isn't supported.
         let isPathAbsolute: [(Bool, Bool)] = [(true, true), (true, false), (false, true)]
 
@@ -419,7 +419,7 @@ final class FileSystemTests: XCTestCase {
                 }
             }
         }
-    }
+    }*/
 
     func testCreateDirectory() async throws {
         let path = try await self.fs.temporaryFilePath()
@@ -559,7 +559,7 @@ final class FileSystemTests: XCTestCase {
         }
     }
 
-    func testCopyLargeFile() async throws {
+/*    func testCopyLargeFile() async throws {
         let sourcePath = try await self.fs.temporaryFilePath()
         let destPath = try await self.fs.temporaryFilePath()
         self.addTeardownBlock { [fs] in
@@ -584,7 +584,7 @@ final class FileSystemTests: XCTestCase {
         try await self.fs.copyItem(at: sourcePath, to: destPath)
         let destInfo = try await self.fs.info(forFileAt: destPath)
         XCTAssertEqual(destInfo?.size, sourceInfo.size)
-    }
+    }*/
 
     func testCopySingleFileCopiesAttributesAndPermissions() async throws {
         let original = try await self.fs.temporaryFilePath()
@@ -1284,7 +1284,7 @@ extension FileSystemTests {
     }
 
     func testReadChunksRange() async throws {
-        try await self.fs.withFileHandle(forReadingAt: NIOFilePath(#filePath)) { handle in
+        try await self.fs.withFileHandle(forReadingAt: NIOFilePath.testFile) { handle in
             let info = try await handle.info()
             let size = info.size
             let endIndex = size + 1
@@ -1310,7 +1310,7 @@ extension FileSystemTests {
     }
 
     func testReadChunksClosedRange() async throws {
-        try await self.fs.withFileHandle(forReadingAt: NIOFilePath(#filePath)) { handle in
+        try await self.fs.withFileHandle(forReadingAt: NIOFilePath.testFile) { handle in
             let info = try await handle.info()
             let size = info.size
             let endIndex = size + 1
@@ -1337,7 +1337,7 @@ extension FileSystemTests {
     }
 
     func testReadChunksPartialRangeUpTo() async throws {
-        try await self.fs.withFileHandle(forReadingAt: NIOFilePath(#filePath)) { handle in
+        try await self.fs.withFileHandle(forReadingAt: NIOFilePath.testFile) { handle in
             let info = try await handle.info()
             let size = info.size
             let endIndex = size + 1
@@ -1365,7 +1365,7 @@ extension FileSystemTests {
     }
 
     func testReadChunksPartialRangeThrough() async throws {
-        try await self.fs.withFileHandle(forReadingAt: NIOFilePath(#filePath)) { handle in
+        try await self.fs.withFileHandle(forReadingAt: NIOFilePath.testFile) { handle in
             let info = try await handle.info()
             let size = info.size
             let endIndex = size + 1
@@ -1394,7 +1394,7 @@ extension FileSystemTests {
     }
 
     func testReadChunksPartialRangeFrom() async throws {
-        try await self.fs.withFileHandle(forReadingAt: NIOFilePath(#filePath)) { handle in
+        try await self.fs.withFileHandle(forReadingAt: NIOFilePath.testFile) { handle in
             let info = try await handle.info()
             let size = info.size
             let endIndex = size + 1
@@ -1418,7 +1418,7 @@ extension FileSystemTests {
     }
 
     func testReadChunksUnboundedRange() async throws {
-        try await self.fs.withFileHandle(forReadingAt: NIOFilePath(#filePath)) { handle in
+        try await self.fs.withFileHandle(forReadingAt: NIOFilePath.testFile) { handle in
             let info = try await handle.info()
             let size = info.size
 
diff --git a/Tests/NIOFSTests/Internal/SyscallTests.swift b/Tests/NIOFSTests/Internal/SyscallTests.swift
index 66ed1171..5253a650 100644
--- a/Tests/NIOFSTests/Internal/SyscallTests.swift
+++ b/Tests/NIOFSTests/Internal/SyscallTests.swift
@@ -17,6 +17,10 @@
 import SystemPackage
 import XCTest
 
+#if canImport(Android)
+import Android
+#endif
+
 #if ENABLE_MOCKING
 final class SyscallTests: XCTestCase {
     func test_openat() throws {
