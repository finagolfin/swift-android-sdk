diff --git a/swift-corelibs-foundation/CMakeLists.txt b/swift-corelibs-foundation/CMakeLists.txt
index 4dac9a46..a929bec0 100644
--- a/swift-corelibs-foundation/CMakeLists.txt
+++ b/swift-corelibs-foundation/CMakeLists.txt
@@ -76,6 +76,14 @@ if(HAS_LIBDISPATCH_API)
   find_package(Threads REQUIRED)
 endif()
 
+# CMake's Threads adds '-pthread' flag to the interface link
+# libraries, which isn't supported by Swift. This is not enabled
+# when building with MSVC, but it trips up the Android build, so
+# we need to clear out the threads INTERFACE_LINK_LIBRARIES.
+if (CMAKE_SYSTEM_NAME STREQUAL "Android")
+  set_property(TARGET Threads::Threads PROPERTY INTERFACE_LINK_LIBRARIES "")
+endif()
+
 set(SAVED_BUILD_SHARED_LIBS ${BUILD_SHARED_LIBS})
 set(BUILD_SHARED_LIBS NO)
 add_subdirectory(CoreFoundation EXCLUDE_FROM_ALL)
diff --git a/swift-corelibs-foundation/CoreFoundation/Base.subproj/ForSwiftFoundationOnly.h b/swift-corelibs-foundation/CoreFoundation/Base.subproj/ForSwiftFoundationOnly.h
index cc1ba843..5bd1e283 100644
--- a/swift-corelibs-foundation/CoreFoundation/Base.subproj/ForSwiftFoundationOnly.h
+++ b/swift-corelibs-foundation/CoreFoundation/Base.subproj/ForSwiftFoundationOnly.h
@@ -64,6 +64,7 @@
 #include <sys/stat.h>
 #include <sys/syscall.h>
 #include <termios.h>
+#include <linux/stat.h>
 #elif TARGET_OS_WASI
 #include <fcntl.h>
 #include <sys/stat.h>
diff --git a/swift-corelibs-foundation/CoreFoundation/Base.subproj/module.modulemap b/swift-corelibs-foundation/CoreFoundation/Base.subproj/module.modulemap
index fe4c0a68..8e95a176 100644
--- a/swift-corelibs-foundation/CoreFoundation/Base.subproj/module.modulemap
+++ b/swift-corelibs-foundation/CoreFoundation/Base.subproj/module.modulemap
@@ -1,6 +1,12 @@
 framework module CoreFoundation [extern_c] [system] {
     umbrella header "CoreFoundation.h"
     explicit module CFPlugInCOM { header "CFPlugInCOM.h" }
+    explicit module ForSwiftFoundationOnly {
+      header "ForSwiftFoundationOnly.h"
+      // Do not re-export imported Clang modules to avoid pulling in
+      // system headers like linux/stat.h whose constants might conflict
+      // with constants from the platform module.
+    }
 
     export *
     module * {
diff --git a/swift-corelibs-foundation/Sources/Foundation/Data.swift b/swift-corelibs-foundation/Sources/Foundation/Data.swift
index 9e5c9faf..57e17e58 100644
--- a/swift-corelibs-foundation/Sources/Foundation/Data.swift
+++ b/swift-corelibs-foundation/Sources/Foundation/Data.swift
@@ -42,6 +42,13 @@
 @usableFromInline let memset = WASILibc.memset
 @usableFromInline let memcpy = WASILibc.memcpy
 @usableFromInline let memcmp = WASILibc.memcmp
+#elseif canImport(Android)
+@usableFromInline let calloc = Android.calloc
+@usableFromInline let malloc = Android.malloc
+@usableFromInline let free = Android.free
+@usableFromInline let memset = Android.memset
+@usableFromInline let memcpy = Android.memcpy
+@usableFromInline let memcmp = Android.memcmp
 #endif
 
 #if !canImport(Darwin)
@@ -57,6 +64,8 @@ internal func malloc_good_size(_ size: Int) -> Int {
 import Glibc
 #elseif canImport(Musl)
 import Musl
+#elseif canImport(Android)
+import Android
 #elseif canImport(WASILibc)
 import WASILibc
 #endif
diff --git a/swift-corelibs-foundation/Sources/Foundation/FileHandle.swift b/swift-corelibs-foundation/Sources/Foundation/FileHandle.swift
index 72ab09a3..92cef10c 100644
--- a/swift-corelibs-foundation/Sources/Foundation/FileHandle.swift
+++ b/swift-corelibs-foundation/Sources/Foundation/FileHandle.swift
@@ -34,6 +34,11 @@ import WASILibc
 fileprivate let _read = WASILibc.read(_:_:_:)
 fileprivate let _write = WASILibc.write(_:_:_:)
 fileprivate let _close = WASILibc.close(_:)
+#elseif canImport(Android)
+import Android
+fileprivate let _read = Android.read(_:_:_:)
+fileprivate let _write = Android.write(_:_:_:)
+fileprivate let _close = Android.close(_:)
 #endif
 
 #if canImport(WinSDK)
diff --git a/swift-corelibs-foundation/Sources/Foundation/FileManager.swift b/swift-corelibs-foundation/Sources/Foundation/FileManager.swift
index fdd84115..e4296eb3 100644
--- a/swift-corelibs-foundation/Sources/Foundation/FileManager.swift
+++ b/swift-corelibs-foundation/Sources/Foundation/FileManager.swift
@@ -25,6 +25,10 @@ import WinSDK
 import WASILibc
 #endif
 
+#if canImport(Android)
+import Android
+#endif
+
 #if os(Windows)
 internal typealias NativeFSRCharType = WCHAR
 internal let NativeFSREncoding = String.Encoding.utf16LittleEndian.rawValue
diff --git a/swift-corelibs-foundation/Sources/Foundation/Host.swift b/swift-corelibs-foundation/Sources/Foundation/Host.swift
index b5205ebb..6bf91c7e 100644
--- a/swift-corelibs-foundation/Sources/Foundation/Host.swift
+++ b/swift-corelibs-foundation/Sources/Foundation/Host.swift
@@ -12,8 +12,9 @@
 import WinSDK
 #endif
 
-#if os(Android)
-    // Android Glibc differs a little with respect to the Linux Glibc.
+#if canImport(Android)
+    import Android
+    // Android Bionic differs a little with respect to the Linux Glibc.
 
     // IFF_LOOPBACK is part of the enumeration net_device_flags, which needs to
     // convert to UInt32.
@@ -26,7 +27,7 @@ import WinSDK
     // getnameinfo uses size_t for its 4th and 6th arguments.
     private func getnameinfo(_ addr: UnsafePointer<sockaddr>?, _ addrlen: socklen_t, _ host: UnsafeMutablePointer<Int8>?, _ hostlen: socklen_t, _ serv: UnsafeMutablePointer<Int8>?, _ servlen: socklen_t, _ flags: Int32) -> Int32 {
         guard let saddr = addr else { return -1 }
-        return Glibc.getnameinfo(saddr, addrlen, host, Int(hostlen), serv, Int(servlen), flags)
+        return Android.getnameinfo(saddr, addrlen, host, Int(hostlen), serv, Int(servlen), flags)
     }
 
     // getifaddrs and freeifaddrs are not available in Android 6.0 or earlier, so call these functions dynamically.
diff --git a/swift-corelibs-foundation/Sources/Foundation/NSData.swift b/swift-corelibs-foundation/Sources/Foundation/NSData.swift
index aaeeb9ae..83a5b2b2 100644
--- a/swift-corelibs-foundation/Sources/Foundation/NSData.swift
+++ b/swift-corelibs-foundation/Sources/Foundation/NSData.swift
@@ -495,6 +495,8 @@ open class NSData : NSObject, NSCopying, NSMutableCopying, NSSecureCoding {
             let createMode = Int(Musl.S_IRUSR) | Int(Musl.S_IWUSR) | Int(Musl.S_IRGRP) | Int(Musl.S_IWGRP) | Int(Musl.S_IROTH) | Int(Musl.S_IWOTH)
 #elseif canImport(WASILibc)
             let createMode = Int(WASILibc.S_IRUSR) | Int(WASILibc.S_IWUSR) | Int(WASILibc.S_IRGRP) | Int(WASILibc.S_IWGRP) | Int(WASILibc.S_IROTH) | Int(WASILibc.S_IWOTH)
+#elseif canImport(Android)
+            let createMode = Int(Android.S_IRUSR) | Int(Android.S_IWUSR) | Int(Android.S_IRGRP) | Int(Android.S_IWGRP) | Int(Android.S_IROTH) | Int(Android.S_IWOTH)
 #endif
             guard let fh = FileHandle(path: path, flags: flags, createMode: createMode) else {
                 throw _NSErrorWithErrno(errno, reading: false, path: path)
diff --git a/swift-corelibs-foundation/Sources/Foundation/NSError.swift b/swift-corelibs-foundation/Sources/Foundation/NSError.swift
index fc87a4d6..f05b503a 100644
--- a/swift-corelibs-foundation/Sources/Foundation/NSError.swift
+++ b/swift-corelibs-foundation/Sources/Foundation/NSError.swift
@@ -16,6 +16,8 @@ import Darwin
 import Glibc
 #elseif canImport(CRT)
 import CRT
+#elseif canImport(Android)
+import Android
 #endif
 
 @_implementationOnly import CoreFoundation
diff --git a/swift-corelibs-foundation/Sources/Foundation/NSLock.swift b/swift-corelibs-foundation/Sources/Foundation/NSLock.swift
index fa56161c..aa8fe7ef 100644
--- a/swift-corelibs-foundation/Sources/Foundation/NSLock.swift
+++ b/swift-corelibs-foundation/Sources/Foundation/NSLock.swift
@@ -11,6 +11,8 @@
 
 #if canImport(Glibc)
 import Glibc
+#elseif canImport(Android)
+import Android
 #endif
 
 #if os(Windows)
diff --git a/swift-corelibs-foundation/Sources/Foundation/NSSwiftRuntime.swift b/swift-corelibs-foundation/Sources/Foundation/NSSwiftRuntime.swift
index c079ed62..c15217ab 100644
--- a/swift-corelibs-foundation/Sources/Foundation/NSSwiftRuntime.swift
+++ b/swift-corelibs-foundation/Sources/Foundation/NSSwiftRuntime.swift
@@ -18,6 +18,8 @@
 @_exported import Glibc
 #elseif canImport(Musl)
 @_exported import Musl
+#elseif canImport(Android)
+@_exported import Android
 #elseif os(WASI)
 @_exported import WASILibc
 #elseif os(Windows)
diff --git a/swift-corelibs-foundation/Sources/Foundation/NSURL.swift b/swift-corelibs-foundation/Sources/Foundation/NSURL.swift
index 4d31e2ba..6169613b 100644
--- a/swift-corelibs-foundation/Sources/Foundation/NSURL.swift
+++ b/swift-corelibs-foundation/Sources/Foundation/NSURL.swift
@@ -22,6 +22,8 @@ import Darwin
 import Glibc
 #elseif canImport(Musl)
 import Musl
+#elseif canImport(Android)
+import Android
 #endif
 
 // NOTE: this represents PLATFORM_PATH_STYLE
diff --git a/swift-corelibs-foundation/Sources/Foundation/Port.swift b/swift-corelibs-foundation/Sources/Foundation/Port.swift
index c53263f0..9f1823fe 100644
--- a/swift-corelibs-foundation/Sources/Foundation/Port.swift
+++ b/swift-corelibs-foundation/Sources/Foundation/Port.swift
@@ -90,22 +90,28 @@ open class SocketPort: Port {}
 
 #else
 
-#if canImport(Glibc) && !os(Android) && !os(OpenBSD)
+#if canImport(Glibc) && !os(OpenBSD)
 import Glibc
 fileprivate let SOCK_STREAM = Int32(Glibc.SOCK_STREAM.rawValue)
 fileprivate let SOCK_DGRAM  = Int32(Glibc.SOCK_DGRAM.rawValue)
 fileprivate let IPPROTO_TCP = Int32(Glibc.IPPROTO_TCP)
 #endif
 
-#if canImport(Glibc) && os(Android) || os(OpenBSD)
+#if canImport(Glibc) && os(OpenBSD)
 import Glibc
 fileprivate let SOCK_STREAM = Int32(Glibc.SOCK_STREAM)
 fileprivate let SOCK_DGRAM  = Int32(Glibc.SOCK_DGRAM)
 fileprivate let IPPROTO_TCP = Int32(Glibc.IPPROTO_TCP)
 fileprivate let INADDR_ANY: in_addr_t = 0
-#if os(OpenBSD)
 fileprivate let INADDR_LOOPBACK = 0x7f000001
 #endif
+
+#if canImport(Android)
+import Android
+fileprivate let SOCK_STREAM = Int32(Android.SOCK_STREAM)
+fileprivate let SOCK_DGRAM  = Int32(Android.SOCK_DGRAM)
+fileprivate let IPPROTO_TCP = Int32(Android.IPPROTO_TCP)
+fileprivate let INADDR_ANY: in_addr_t = 0
 #endif
 
 
diff --git a/swift-corelibs-foundation/Sources/Foundation/Thread.swift b/swift-corelibs-foundation/Sources/Foundation/Thread.swift
index 166a5d3f..4f401987 100644
--- a/swift-corelibs-foundation/Sources/Foundation/Thread.swift
+++ b/swift-corelibs-foundation/Sources/Foundation/Thread.swift
@@ -17,6 +17,8 @@ import WinSDK
 import Glibc
 #elseif canImport(Musl)
 import Musl
+#elseif canImport(Android)
+import Android
 #endif
 
 // WORKAROUND_SR9811
diff --git a/swift-corelibs-foundation/Sources/Tools/plutil/main.swift b/swift-corelibs-foundation/Sources/Tools/plutil/main.swift
index d71d9ba9..bc35a172 100644
--- a/swift-corelibs-foundation/Sources/Tools/plutil/main.swift
+++ b/swift-corelibs-foundation/Sources/Tools/plutil/main.swift
@@ -15,6 +15,9 @@ import Glibc
 #elseif canImport(Musl)
 import Foundation
 import Musl
+#elseif canImport(Android)
+import Foundation
+import Android
 #elseif canImport(CRT)
 import Foundation
 import CRT
diff --git a/swift-corelibs-foundation/Tests/Foundation/FTPServer.swift b/swift-corelibs-foundation/Tests/Foundation/FTPServer.swift
index 8bb4a9d7..a09fcae5 100644
--- a/swift-corelibs-foundation/Tests/Foundation/FTPServer.swift
+++ b/swift-corelibs-foundation/Tests/Foundation/FTPServer.swift
@@ -15,6 +15,8 @@ import Dispatch
     import Glibc
 #elseif canImport(Darwin)
     import Darwin
+#elseif canImport(Android)
+    import Android
 #endif
 
 public class ServerSemaphore {
diff --git a/swift-corelibs-foundation/Tests/Foundation/HTTPServer.swift b/swift-corelibs-foundation/Tests/Foundation/HTTPServer.swift
index 0ab0f0dc..5066cda2 100644
--- a/swift-corelibs-foundation/Tests/Foundation/HTTPServer.swift
+++ b/swift-corelibs-foundation/Tests/Foundation/HTTPServer.swift
@@ -21,6 +21,8 @@ import Dispatch
     import Darwin
 #elseif canImport(Glibc)
     import Glibc
+#elseif canImport(Android)
+    import Android
 #endif
 
 #if !os(Windows)
diff --git a/swift-corelibs-foundation/Tests/Foundation/Tests/TestFileHandle.swift b/swift-corelibs-foundation/Tests/Foundation/Tests/TestFileHandle.swift
index 5416c41c..82655a29 100644
--- a/swift-corelibs-foundation/Tests/Foundation/Tests/TestFileHandle.swift
+++ b/swift-corelibs-foundation/Tests/Foundation/Tests/TestFileHandle.swift
@@ -111,7 +111,14 @@ class TestFileHandle : XCTestCase {
 #else
         var fds: [Int32] = [-1, -1]
         fds.withUnsafeMutableBufferPointer { (pointer) -> Void in
-            pipe(pointer.baseAddress)
+            let baseAddress = pointer.baseAddress
+#if canImport(Android)
+            // pipe takes in a non-nullable pointer in the Android NDK only.
+            guard let baseAddress else {
+                return
+            }
+#endif
+            pipe(baseAddress)
         }
         
         close(fds[1])
diff --git a/swift-corelibs-foundation/Tests/Foundation/Tests/TestNSData.swift b/swift-corelibs-foundation/Tests/Foundation/Tests/TestNSData.swift
index 2c84f633..7f72e0d0 100644
--- a/swift-corelibs-foundation/Tests/Foundation/Tests/TestNSData.swift
+++ b/swift-corelibs-foundation/Tests/Foundation/Tests/TestNSData.swift
@@ -589,6 +589,8 @@ class TestNSData: LoopbackServerTest {
                 let permission = try fileManager._permissionsOfItem(atPath: url.path)
 #if canImport(Darwin)
                 let expected = Int(S_IRUSR) | Int(S_IWUSR) | Int(S_IRGRP) | Int(S_IWGRP) | Int(S_IROTH) | Int(S_IWOTH)
+#elseif canImport(Android)
+                let expected = Int(Android.S_IRUSR) | Int(Android.S_IWUSR) | Int(Android.S_IRGRP) | Int(Android.S_IWGRP) | Int(Android.S_IROTH) | Int(Android.S_IWOTH)
 #else
                 let expected = Int(Glibc.S_IRUSR) | Int(Glibc.S_IWUSR) | Int(Glibc.S_IRGRP) | Int(Glibc.S_IWGRP) | Int(Glibc.S_IROTH) | Int(Glibc.S_IWOTH)
 #endif
@@ -612,6 +614,8 @@ class TestNSData: LoopbackServerTest {
                 let permission = try fileManager._permissionsOfItem(atPath: url.path)
 #if canImport(Darwin)
                 let expected = Int(S_IRUSR) | Int(S_IWUSR) | Int(S_IRGRP) | Int(S_IWGRP) | Int(S_IROTH) | Int(S_IWOTH)
+#elseif canImport(Android)
+                let expected = Int(Android.S_IRUSR) | Int(Android.S_IWUSR) | Int(Android.S_IRGRP) | Int(Android.S_IWGRP) | Int(Android.S_IROTH) | Int(Android.S_IWOTH)
 #else
                 let expected = Int(Glibc.S_IRUSR) | Int(Glibc.S_IWUSR) | Int(Glibc.S_IRGRP) | Int(Glibc.S_IWGRP) | Int(Glibc.S_IROTH) | Int(Glibc.S_IWOTH)
 #endif
diff --git a/swift-corelibs-foundation/Tests/Foundation/Tests/TestTimeZone.swift b/swift-corelibs-foundation/Tests/Foundation/Tests/TestTimeZone.swift
index 5e15c000..5c679b38 100644
--- a/swift-corelibs-foundation/Tests/Foundation/Tests/TestTimeZone.swift
+++ b/swift-corelibs-foundation/Tests/Foundation/Tests/TestTimeZone.swift
@@ -160,7 +160,12 @@ class TestTimeZone: XCTestCase {
         var lt = tm()
         localtime_r(&t, &lt)
         let zoneName = NSTimeZone.system.abbreviation() ?? "Invalid Abbreviation"
-        let expectedName = String(cString: lt.tm_zone, encoding: .ascii) ?? "Invalid Zone"
+        // tm_zone is nullable in the Android NDK only.
+        let tm_zone: UnsafePointer<CChar>? = lt.tm_zone
+        guard let tm_zone else {
+            return
+        }
+        let expectedName = String(cString: tm_zone, encoding: .ascii) ?? "Invalid Zone"
         XCTAssertEqual(zoneName, expectedName, "expected name \"\(expectedName)\" is not equal to \"\(zoneName)\"")
     }
 #endif
diff --git a/swift-corelibs-foundation/Tests/Foundation/main.swift b/swift-corelibs-foundation/Tests/Foundation/main.swift
index e6c7b35b..643c0c12 100644
--- a/swift-corelibs-foundation/Tests/Foundation/main.swift
+++ b/swift-corelibs-foundation/Tests/Foundation/main.swift
@@ -13,6 +13,8 @@
     import Darwin
 #elseif canImport(Glibc)
     import Glibc
+#elseif canImport(Android)
+    import Android
 #elseif canImport(CRT)
     import CRT
 #endif
